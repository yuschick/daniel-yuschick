<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xml:base="https://www.danyuschick.com/">
  <channel>
    <title>Daniel Yuschick - Articles</title>
    <link>https://www.danyuschick.com/</link>
    <description>Frontend development articles with a focus on web accessibility, HTML, CSS and design systems.</description>
    <language>en</language>
      
      <item>
        <title>Simplify Your Color Palette with CSS Color-Mix()</title>
        <link>https://www.danyuschick.com/articles/simplify-your-color-palette-with-css-color-mix/</link>
        <description>&lt;p&gt;&lt;strong&gt;QUICK SUMMARY ↬&lt;/strong&gt; Defining a color palette and theme can be a lot of work, especially when considering contextual colors for elements’ various states. While CSS &lt;code&gt;color-mix()&lt;/code&gt; &lt;em&gt;only&lt;/em&gt; blends two colors together, this little function may be the key to maximizing your colors without maximum effort.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There’s a reason for all the new, experimental color features CSS is introducing. And there’s a reason for all the excitement they’re stirring up.&lt;/p&gt;
&lt;p&gt;Colors are hard.&lt;/p&gt;
&lt;p&gt;Defining a base color palette can be time-consuming and involve quite a few stakeholders. And that’s not even considering contextual colors, like hover, active and inactive states. Defining these values requires more time, more attention to accessibility and can result in a bloated palette, and an even more bloated set of design tokens.&lt;/p&gt;
&lt;p&gt;It can be a lot to juggle 🤹&lt;/p&gt;
&lt;p&gt;While the CSS &lt;code&gt;color-mix()&lt;/code&gt; function may &lt;em&gt;only&lt;/em&gt; blend two colors together, could it be used to simplify color palettes and streamline contextual values across themes?&lt;/p&gt;
&lt;h2&gt;The CSS Color-Mix() Function&lt;/h2&gt;
&lt;p&gt;The CSS &lt;code&gt;color-mix()&lt;/code&gt; function is an experimental feature which is currently a part of &lt;a href=&quot;https://www.w3.org/TR/css-color-5/#colorcontrast&quot;&gt;Color Module 5&lt;/a&gt;. True to its name, the function will accept any two colors, mix them together and return a little color Frankenstein.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/Wv3U-6b7pU-320.webp 320w, https://www.danyuschick.com/assets/images/Wv3U-6b7pU-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/Wv3U-6b7pU-320.jpeg 320w, https://www.danyuschick.com/assets/images/Wv3U-6b7pU-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;CSS Color-Mix() required syntax&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/Wv3U-6b7pU-320.jpeg&quot; width=&quot;862&quot; height=&quot;357&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;For the sake of this article, let’s define how these arguments will be called using this example.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Color Space&lt;/strong&gt; would refer to &lt;code&gt;HSL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base Color&lt;/strong&gt; would refer to &lt;code&gt;red&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base Percent&lt;/strong&gt; would refer to &lt;code&gt;50%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blend Color&lt;/strong&gt; would refer to &lt;code&gt;white&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Blend Percent&lt;/strong&gt;, not shown in this example, will refer to a value covered later&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are quite a few moving pieces here, so let’s have a quick interactive visual to simulate the base color, base percent, and blend color.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;rNpQpjJ&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/embed/rNpQpjJ&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;figure&gt;
  &lt;video controls=&quot;&quot;&gt;
    &lt;source src=&quot;https://www.danyuschick.com/assets/articles/color-mix/color-mix-demo-1.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption&gt;Results of color-mix blending two colors with different percentages&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Like with any experimental feature, the syntax or features could change before widespread browser adoption. However, the features in Color Module 5 seem stable enough to, at the very least, begin tinkering ourselves.&lt;/p&gt;
&lt;p&gt;At the time of writing, browser support is very limited, as in, all but non-existent. The feature can be toggled behind development flags in both Firefox and &lt;a href=&quot;https://developer.apple.com/safari/technology-preview&quot;&gt;Safari Technology Preview&lt;/a&gt;. But the web moves fast, and it’s probably worth visiting &lt;a href=&quot;https://caniuse.com/?search=color-mix&quot;&gt;Color-Mix() on caniuse&lt;/a&gt; to see the latest (and hopefully greatest) support.&lt;/p&gt;
&lt;p&gt;Now, with the formalities out of the way, grab some dark rum, ginger beer and lime juice, and let’s get mixing.&lt;/p&gt;
&lt;h2&gt;Throwback Art Class 🎨&lt;/h2&gt;
&lt;p&gt;Do you remember learning about the color wheel in art class?&lt;/p&gt;
&lt;p&gt;The primary colors anchored the wheel and when blended, they formed the secondary layer. Lastly, blending the secondary layer formed the tertiary colors. The wheel was complete.&lt;/p&gt;
&lt;p&gt;Disregarding the lack of a visual wheel here, CSS &lt;code&gt;color-mix()&lt;/code&gt; can be used to create the same effect.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;BaJGRrr&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/embed/BaJGRrr&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-XwMolucv0-320.webp 320w, https://www.danyuschick.com/assets/images/-XwMolucv0-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-XwMolucv0-320.jpeg 320w, https://www.danyuschick.com/assets/images/-XwMolucv0-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Result of using color-mix to recreate the a linear color wheel&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/-XwMolucv0-320.jpeg&quot; width=&quot;862&quot; height=&quot;296&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Building the linear color wheel was a lot of fun and a great dive into using &lt;code&gt;color-mix()&lt;/code&gt;. It often helps when experimenting with a new feature to already know what the visual outcome should be.&lt;/p&gt;
&lt;p&gt;So how does this work?&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* First: Define the base primary colors */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--primary-1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ff0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--primary-2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #f00&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--primary-3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #00f&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* Next: Mix the primary colors to create the secondary colors */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--secondary-1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--secondary-2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--secondary-3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* Last: Mix the primary and secondary colors to create the tertiary colors */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--tertiary-1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--secondary-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--tertiary-2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--secondary-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--tertiary-3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--secondary-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--tertiary-4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--secondary-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--tertiary-5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--secondary-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--tertiary-6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--secondary-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course, when I was in art class, there was only one set of paints. So if you wanted yellow, there was only one yellow. Red? There was only one red. Blue? Well, you get the idea.&lt;/p&gt;
&lt;p&gt;But the web and CSS offer a much wider selection of colors in the way of &lt;em&gt;‘color spaces.’&lt;/em&gt; Some of these color spaces may already be familiar, but there were quite a few I hadn’t used before, including &lt;a href=&quot;https://css-tricks.com/new-css-color-features-preview/&quot;&gt;four new CSS color features&lt;/a&gt; which are gradually gaining support.&lt;/p&gt;
&lt;p&gt;Color spaces can calculate their colors differently from one another. Newer color spaces provide wider palettes with more vivid shades to maximize the latest screen technologies, like ultra-high-definition retina displays. What this means is a single color may appear differently across each color space.&lt;/p&gt;
&lt;p&gt;Knowing the CSS &lt;code&gt;color-mix()&lt;/code&gt; function supports using different color spaces, let’s experiment with color spaces by replacing the use of &lt;code&gt;srgb&lt;/code&gt; from the previous example, with a custom property to see how the color wheel changes.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;XWVygVM&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/embed/XWVygVM&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;figure&gt;
  &lt;video controls=&quot;&quot;&gt;
    &lt;source src=&quot;https://www.danyuschick.com/assets/articles/color-mix/color-mix-demo-3.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption&gt;Using color-mix to toggle the mixture’s color space&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;color-mix()&lt;/code&gt; function isn’t limited to only blending HEX codes either. In fact, it can mix multiple color types at once. The previous example can be modified to use different color types while returning the same results.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* First: Define the base primary colors */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--primary-1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yellow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--primary-2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;255&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--primary-3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;240&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* Next: Mix the primary colors to create the secondary colors */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--secondary-1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--secondary-2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--secondary-3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--primary-1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Mixing n’ Matching&lt;/h2&gt;
&lt;p&gt;Recreating childhood art class is fun, but those concepts can be taken further and applied more practically to our adulthood hobbies and careers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A lot of time can be spent on defining every color variation and shade, but color-mix() can blend theme values together to fill in those variation gaps.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s take a look at contextual UI colors, like button &lt;code&gt;:hover&lt;/code&gt; and &lt;code&gt;:active&lt;/code&gt; states. A lot of time can be spent defining these values to ensure they’re cohesive with the current theme and accessible. But when themes often include primary dark and light colors already, could these values be mixed to create contextual colors a bit more automatically?&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;OJzaLyx&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/embed/OJzaLyx&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;figure&gt;
  &lt;video controls=&quot;&quot;&gt;
    &lt;source src=&quot;https://www.danyuschick.com/assets/articles/color-mix/color-mix-demo-4.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption&gt;Using color-mix to blend theme colors to create contextual shades&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;While a similar effect could be created with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hwb&quot;&gt;the HWB color function&lt;/a&gt; by increasing the button color’s blackness value, sometimes darkening a button isn’t just a matter of mixing in a splash of black. Just ask anybody who’s ever struggled finding the perfect dark mode theme. This is also where &lt;code&gt;color-mix()&lt;/code&gt; stands out from Sass &lt;code&gt;darken()&lt;/code&gt; and &lt;code&gt;lighten()&lt;/code&gt; functions. The &lt;code&gt;color-mix()&lt;/code&gt; function gives greater, granular control of how colors are adjusted and it does no natively to CSS.&lt;/p&gt;
&lt;p&gt;By mixing a specific theme value, like &lt;code&gt;--color-dark-primary&lt;/code&gt; , the pseudo states can be created while remaining visually cohesive with the rest of the theme.&lt;/p&gt;
&lt;p&gt;Additionally, a &lt;code&gt;color-mix()&lt;/code&gt; result can be used as the base color in another &lt;code&gt;color-mix()&lt;/code&gt; function. This is done in the demo to define the buttons’ &lt;code&gt;:active&lt;/code&gt; states relative to their &lt;code&gt;:hover&lt;/code&gt; state.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When specifying a base percentage, the blend color is mixed with a percentage that would total 100%. If the base percent is 75%, the blend percent will be 25%.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--color-dark-primary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #dedbd2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--btn-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #087e8b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--btn-bg-hover&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 75%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--color-dark-primary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--btn-bg-active&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-bg-hover&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 80%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--color-dark-primary&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-bg-hover&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:active&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-bg-active&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the &lt;code&gt;--btn-bg-hover&lt;/code&gt; value is defined by mixing 75% of &lt;code&gt;--btn-bg&lt;/code&gt; with &lt;code&gt;--color-dark-primary&lt;/code&gt;. Then, &lt;code&gt;--btn-bg-active&lt;/code&gt; is set by mixing 80% of &lt;code&gt;--btn-bg-hover&lt;/code&gt; with &lt;code&gt;--color-dark-primary&lt;/code&gt; again.&lt;/p&gt;
&lt;p&gt;It’s important to note, when specifying a base percentage, the blend color is mixed with a percentage that would total 100%. If the base percent is 75%, the blend percent will be 25%.&lt;/p&gt;
&lt;p&gt;However, this becomes a bit complicated when introducing a separate blend percent.&lt;/p&gt;
&lt;h2&gt;Mixing Mastery with Blend Percents&lt;/h2&gt;
&lt;p&gt;As an optional argument for &lt;code&gt;color-mix()&lt;/code&gt;, the blend percent introduces an additional level of mix mastery. In the previous examples without a blend percentage, the blend color would automatically use a value that, when added to the base percent, totaled 100.&lt;/p&gt;
&lt;p&gt;If the base percent was 50, the blend percent would be 50. If the base percent was 99, the blend percent would be 1.&lt;/p&gt;
&lt;p&gt;However, specifying a custom blend percent means the percentage total may not always round out so evenly.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/RfZmU9VsGj-320.webp 320w, https://www.danyuschick.com/assets/images/RfZmU9VsGj-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/RfZmU9VsGj-320.jpeg 320w, https://www.danyuschick.com/assets/images/RfZmU9VsGj-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Optionally define a blend color percentage&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/RfZmU9VsGj-320.jpeg&quot; width=&quot;862&quot; height=&quot;306&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;While the &lt;a href=&quot;https://www.w3.org/TR/css-color-5/#color-mix&quot;&gt;W3 docs&lt;/a&gt; explain the calculations behind this functionality quite well, the math is a tad beyond my abilities to clearly explain. This is art class after all. But as best as I can put it–&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;--math-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; red 20%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; white 60%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the base percent is &lt;code&gt;20&lt;/code&gt; while the blend percent is &lt;code&gt;60&lt;/code&gt; creating a total of &lt;code&gt;80&lt;/code&gt;. This gives us, what’s called, an alpha multiplier of &lt;code&gt;0.8&lt;/code&gt; where &lt;code&gt;1 = 100&lt;/code&gt; and &lt;code&gt;0.8 = 80%&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To fill in the gaps, the function will multiply the base and blend percentages by this alpha multiplier to scale them up to 100% while remaining relative to their original weights.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;20% * 100/80 = 25%&lt;br /&gt;60% * 100/80 = 75%&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;--math-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; red 25%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; white 75%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the event the base and blend percentages total more than 100, the inverse of this approach would be taken to round down to 100. Again, the math behind the scaling of these values, along with the general mixing calculations is beyond my depth, and for those interested in digging deeper into the technicalities of &lt;code&gt;color-mix()&lt;/code&gt;, I would point to &lt;a href=&quot;https://www.w3.org/TR/css-color-5/#color-mix-with-alpha&quot;&gt;the W3 docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, that mathematical understanding isn’t required for the below demo where both the base and blend percentages can be adjusted to view the result.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;eYyQwKd&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/embed/eYyQwKd&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;figure&gt;
  &lt;video controls=&quot;&quot;&gt;
    &lt;source src=&quot;https://www.danyuschick.com/assets/articles/color-mix/color-mix-demo-5.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption&gt;Using color-mix with base and blend percentages&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;Actin’ Shady with Transparencies&lt;/h2&gt;
&lt;p&gt;Colors with transparency add, yet another, level to the &lt;code&gt;color-mix()&lt;/code&gt; function. The concept seemed complicated, but after experimenting, opacities look to mix similarly to the opaque mix percentages.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--base-opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--blend-opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--base-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;255&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--base-opacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--blend-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 255&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--blend-opacity&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;#result&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in lch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--base-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--blend-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this sample, the base color is red and blend color is blue. In normal circumstances, these colors would mix to create pink. However, each color is defined using &lt;code&gt;rgba&lt;/code&gt; and a &lt;code&gt;50%&lt;/code&gt; opacity.&lt;/p&gt;
&lt;p&gt;The result is the expected pink shade, but with an averaged opacity. If the base opacity is &lt;code&gt;100%&lt;/code&gt; and the blend opacity is &lt;code&gt;0%&lt;/code&gt;, the result opacity will be &lt;code&gt;50%&lt;/code&gt;. But regardless of the result opacity, the 50/50 color mix keeps its consistent pink shade.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;JjMwope&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/embed/JjMwope&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;figure&gt;
  &lt;video controls=&quot;&quot;&gt;
    &lt;source src=&quot;https://www.danyuschick.com/assets/articles/color-mix/color-mix-demo-6.mp4&quot; type=&quot;video/mp4&quot; /&gt;
  &lt;/video&gt;
  &lt;figcaption&gt;The results of using color-mix with transparent colors&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2&gt;A Dash of Caution&lt;/h2&gt;
&lt;p&gt;There are inevitable drawbacks to consider, as with any experimental or new feature, and &lt;code&gt;color-mix()&lt;/code&gt; is no different.&lt;/p&gt;
&lt;h3&gt;Custom Properties and Fallbacks&lt;/h3&gt;
&lt;p&gt;Since CSS custom properties support fallback values for when the property is not defined, it seemed like a good approach to use &lt;code&gt;color-mix()&lt;/code&gt; as a progressive enhancement.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;--background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; red 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--background-color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--fallback-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;color-mix()&lt;/code&gt; is not supported, the &lt;code&gt;--background-color&lt;/code&gt; property would not be defined, and therefor the &lt;code&gt;--fallback-color&lt;/code&gt; would be used. Unfortunately, that’s not how this works.&lt;/p&gt;
&lt;p&gt;An interesting thing happens in unsupported browsers – the custom property would be defined with the function itself. Here’s an example of this from Chrome DevTools.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-KtQsH4TOb-320.webp 320w, https://www.danyuschick.com/assets/images/-KtQsH4TOb-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-KtQsH4TOb-320.jpeg 320w, https://www.danyuschick.com/assets/images/-KtQsH4TOb-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Unsupported browsers, like Chrome, will use color-mix() as a value&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/-KtQsH4TOb-320.jpeg&quot; width=&quot;862&quot; height=&quot;68&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Because the &lt;code&gt;--background-color&lt;/code&gt; property is &lt;em&gt;technically&lt;/em&gt; defined, the fallback won’t trigger.&lt;/p&gt;
&lt;p&gt;However, that’s not to say &lt;code&gt;color-mix()&lt;/code&gt; can’t be used progressively, though. It can be paired with the &lt;code&gt;@supports()&lt;/code&gt; function, but be mindful if you decide to do so. As exciting as it may be, with such limited support and potential for syntax and/or functionality changes, it may be best to hold off on mixing this little gem into an entire codebase.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; red 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; red 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; blue&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;CurrentColor is Not Supported&lt;/h3&gt;
&lt;p&gt;A powerful little piece of CSS is being able to use &lt;code&gt;currentColor&lt;/code&gt; as a value, keeping styles relative to their element. Unfortunately, this relative variable cannot be used with &lt;code&gt;color-mix()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-mix&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;in srgb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; currentColor 50%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; white&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The hope was to have ever greater control over relative colors, but unfortunately, using &lt;code&gt;currentColor&lt;/code&gt; in this way will not work. While &lt;code&gt;color-mix()&lt;/code&gt; can’t achieve relative colors to this degree, new relative color syntax is also coming to CSS. &lt;a href=&quot;https://www.stefanjudis.com/notes/new-in-css-relative-colors/&quot;&gt;Read about CSS relative color syntax with Stefan Judis&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Wrap-Up&lt;/h2&gt;
&lt;p&gt;While &lt;code&gt;color-mix()&lt;/code&gt; may not be as powerful as something like &lt;code&gt;color-contrast()&lt;/code&gt;, there is definitely a place for it in a CSS tool belt – or kitchen cabinet. Wherever.&lt;/p&gt;
&lt;p&gt;The use cases for contextual colors are intriguing, while the integration into design systems and themes to potentially simplify color palettes while retaining great flexibility is where I most want to experiment with the feature. However, those experiments are likely still a ways off due to the current browser support.&lt;/p&gt;
&lt;p&gt;Personally, combining &lt;code&gt;color-mix()&lt;/code&gt; with &lt;code&gt;color-contrast()&lt;/code&gt; is an area that seems particularly exciting, but without proper browser support yet, will be difficult to fully explore.&lt;/p&gt;
&lt;p&gt;Where would you first implement &lt;code&gt;color-mix()&lt;/code&gt;? 🤔&lt;/p&gt;
&lt;p&gt;Maybe it could be used as a mixin to roughly replicate the &lt;code&gt;lighten()&lt;/code&gt; and &lt;code&gt;darken()&lt;/code&gt; SCSS functions. Could there be greater potential in the realm of user-generated themes? Or even web-based graphic editors and tools? Maybe it could be used as a simple color format converter based on device capabilities.&lt;/p&gt;
&lt;p&gt;Nevertheless, CSS is providing the web with plenty of new and exciting ingredients. It’s only a matter of time before we start mixing up some incredible recipes.&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix&quot;&gt;Color-Mix() on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://caniuse.com/?search=color-mix&quot;&gt;Support stats on caniuse.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-color-5/#color-mix&quot;&gt;Color-Mix() on W3 Color Module 5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codepen.io/collection/rxjELE&quot;&gt;Color-Mix() Demos Collection on CodePen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 Jun 2022 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/simplify-your-color-palette-with-css-color-mix/</guid>
      </item>
      
      <item>
        <title>Manage Accessible Design System Themes With CSS Color-Contrast()</title>
        <link>https://www.danyuschick.com/articles/manage-accessible-design-system-themes-with-css-color-contrast/</link>
        <description>&lt;p&gt;&lt;strong&gt;QUICK SUMMARY ↬&lt;/strong&gt; Developing accessible products can be challenging, especially when some of the requirements are beyond the scope of development. It’s one thing to enforce &lt;code&gt;alt&lt;/code&gt; text for images and labels for form fields, but another to define an accessible color palette. From working with design handoffs to supporting custom themes in a design system, the CSS &lt;code&gt;color-contrast()&lt;/code&gt; function can become a cornerstone for developers in enforcing sufficiently contrasting and accessible UIs.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;There’s certainly no shortage of design systems available to use when building your next project. Between IBM’s &lt;a href=&quot;https://carbondesignsystem.com/&quot;&gt;Carbon&lt;/a&gt;, &lt;a href=&quot;https://design.wonderflow.ai/&quot;&gt;Wanda&lt;/a&gt; and &lt;a href=&quot;https://nordhealth.design/&quot;&gt;Nord&lt;/a&gt;, there are plenty of terrific design systems to choose from. Yet, while each one contains its own nuances and opinions, most share a similar goal — simplifying the development process of creating beautifully accessible user interfaces.&lt;/p&gt;
&lt;p&gt;It’s an admirable goal and, honestly, one that has led me to shift my own career into design systems. But a core feature at the foundation of many design systems is the extensibility for theming. And why wouldn’t it be? Without some flexibility for branding, every product using a particular system would look the same, &lt;em&gt;à la Bootstrap around 2012&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;While providing support for custom themes is vital, it also leaves the most well-intentioned system’s accessibility at the mercy of the implementation. Some teams may spend weeks, if not months, defining their ideal color palette for a rebranding. They’ll labor over each shade and color combination to ensure everything is reliable, informative, and accessible.&lt;/p&gt;
&lt;p&gt;Others simply can’t and/or won’t do that.&lt;/p&gt;
&lt;p&gt;It’s one thing to require &lt;code&gt;alt&lt;/code&gt; text on an &lt;code&gt;img&lt;/code&gt; element or a &lt;code&gt;label&lt;/code&gt; for an &lt;code&gt;input&lt;/code&gt; element, but enforcing accessible color palettes is an entirely different beast. It’s a beast with jagged yellow teeth, fiery-red eyes, and green scales covering its body like sheets of crocodile armor.&lt;/p&gt;
&lt;p&gt;At least you &lt;em&gt;think&lt;/em&gt; it is. For all you know, it could be a beast of nothing more than indistinct shades of black and slightly darker black.&lt;/p&gt;
&lt;p&gt;And therein lies the problem.&lt;/p&gt;
&lt;h2&gt;The CSS &lt;code&gt;Color-Contrast()&lt;/code&gt; Function&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Building inclusive products doesn’t mean supporting devices but supporting the people using them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The CSS &lt;code&gt;color-contrast()&lt;/code&gt; function is an experimental feature which is currently a part of &lt;a href=&quot;https://www.w3.org/TR/css-color-5/#colorcontrast&quot;&gt;Color Module 5&lt;/a&gt;. Its purpose — and the reason for the excitement of this article — is to select the greatest contrasting color from a list when compared against a base color.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/k61P6lKvq8-320.webp 320w, https://www.danyuschick.com/assets/images/k61P6lKvq8-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/k61P6lKvq8-320.jpeg 320w, https://www.danyuschick.com/assets/images/k61P6lKvq8-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;CSS color-contrast requires a base color and a color list.&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/k61P6lKvq8-320.jpeg&quot; width=&quot;862&quot; height=&quot;237&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2&gt;Color Me Intrigued&lt;/h2&gt;
&lt;p&gt;It was Rachel Andrew’s talk at AxeCon 2022, “&lt;a href=&quot;https://www.deque.com/axe-con/sessions/new-css-with-accessibility-in-mind/&quot;&gt;New CSS With Accessibility in Mind&lt;/a&gt;”, where I was introduced to &lt;code&gt;color-contrast()&lt;/code&gt;. I scribbled the function down into my notebook and circled it multiple times to &lt;em&gt;make it pop&lt;/em&gt;. Because my mind has been entirely in the world of design systems as of late, I wondered how big of an impact this little CSS feature could have in that context.&lt;/p&gt;
&lt;p&gt;In her presentation, Rachel &lt;a href=&quot;https://codepen.io/rachelandrew/pen/XWzapXJ&quot;&gt;demoed the new feature&lt;/a&gt; by dynamically defining text colors based on a background. So, let’s start there as well, by setting background and text colors on an &lt;code&gt;article&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--article-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #222&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs #fff&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We start by defining the &lt;code&gt;--article-bg&lt;/code&gt; custom property as a dark grey, &lt;code&gt;#222&lt;/code&gt;. That property is then used as the base color in the &lt;code&gt;color-contrast()&lt;/code&gt; function and compared against each item in the color list to find the highest contrasting value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Base Color&lt;/strong&gt; #222, &lt;strong&gt;Color List&lt;/strong&gt; #FFF = &lt;strong&gt;Contrast Ratio&lt;/strong&gt; 15.9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base Color&lt;/strong&gt; #222, &lt;strong&gt;Color List&lt;/strong&gt; #000 = &lt;strong&gt;Contrast Ratio&lt;/strong&gt; 1.31&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result, the article&#39;s &lt;code&gt;color&lt;/code&gt; will be set to white, &lt;code&gt;#FFF&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But this can be taken further.&lt;/p&gt;
&lt;p&gt;We can effectively chain &lt;code&gt;color-contrast()&lt;/code&gt; functions by using the result of one as the base color of another. Let&#39;s extend the &lt;code&gt;article&lt;/code&gt; example by defining the &lt;code&gt;::selection&lt;/code&gt; color relative to its text.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--article-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #222&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--article-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs #fff&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;::selection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs #fff&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, as the text color is defined, so will its selection background.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;KKZzeEj&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/pen/KKZzeEj&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/color-contrast/color-contrast-demo-1.gif&quot; alt=&quot;Results of using color-contrast() for text and ::selection colors&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;color-contrast()&lt;/code&gt; function isn&#39;t limited to only comparing HEX codes either. In fact, it can compare multiple color types at once. The previous example can be modified to use different color types while returning the same results.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--article-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;34&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 34&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 34&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--article-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; black&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;::selection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs &lt;span class=&quot;token function&quot;&gt;hsl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0%&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; black&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;From Pseudo-Elements to Pseudo-Classes&lt;/h2&gt;
&lt;p&gt;Setting text and &lt;code&gt;::selection&lt;/code&gt; colors dynamically can be intriguing, but it&#39;s not exactly like being in a high-speed car chase with Burt Reynolds either --- at least, I wouldn&#39;t think. Text and background colors tend to be quite static. Once they&#39;re rendered, they don&#39;t often change.&lt;/p&gt;
&lt;p&gt;So, let&#39;s shift gears and &lt;em&gt;focus&lt;/em&gt; 🥁 on interactive elements and their pseudo-classes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#39;s essential that all interactive elements have compliant focus indicators, but it&#39;s rarely as straight forward as creating a single, universal style.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When navigating a page by keyboard, there tends to be quite a variety of tab stops along the way --- links inside of body text, buttons, and inputs, maybe even a card or a linked image. While it&#39;s essential that each of these elements have a compliant focus indicator, it&#39;s rarely as straightforward as creating a single, universal style. Using &lt;code&gt;color-contrast()&lt;/code&gt; can help.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--body-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #131e25&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--btn-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #ffba76&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--btn-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs #fff&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:hover&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;--btn-bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #b15900&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;:focus&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;--color-list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--btn-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #bbb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #555&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 0 1px 3px &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--body-bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--color-list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There&#39;s a lot going on in this snippet demonstrating the potential of &lt;code&gt;color-contrast()&lt;/code&gt;, so let&#39;s go through it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--btn-bg&lt;/code&gt; custom property is used as the base color in selecting the &lt;code&gt;--btn-color&lt;/code&gt; value. Anytime &lt;code&gt;--btn-bg&lt;/code&gt; changes, &lt;code&gt;--btn-color&lt;/code&gt; will be redefined as well. This is leveraged in the &lt;code&gt;:hover&lt;/code&gt; state, doing away with pairing button colors manually and letting &lt;code&gt;color-contrast()&lt;/code&gt; do it automatically.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;:focus&lt;/code&gt; styles is where this approach can be expanded by using the &lt;code&gt;--body-bg&lt;/code&gt; custom property as the base color. It&#39;s compared to the current button styles. What this provides is the ability to have contextually-aware focus styles. Should the default focus styles be too low contrast given the element&#39;s background placement, a color matching that element can be used. Of course, the color list can also contain safe fallbacks, just in case.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;WNdrXyG&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/pen/WNdrXyG&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/color-contrast/color-contrast-demo-2.gif&quot; alt=&quot;Results of color-contrast() on button :hover and :focus pseudo-classes&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The requirements for compliant focus indicators stretch beyond the scope of this article, but Stephanie Eckles&#39; presentation, &amp;quot;&lt;a href=&quot;https://www.deque.com/axe-con/sessions/modern-css-upgrades-to-improve-accessibility/&quot;&gt;Modern CSS Upgrades To Improve Accessibility&lt;/a&gt;&amp;quot; covers them in great detail and with clear examples.&lt;/p&gt;
&lt;h2&gt;Define a Target Contrast Ratio&lt;/h2&gt;
&lt;p&gt;Earlier, I may have been a &lt;em&gt;touch blasé&lt;/em&gt; about the optional third parameter for &lt;code&gt;color-contrast()&lt;/code&gt;. When in reality, this is where the feature showcases its potential.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/6hZxJid7D8-320.webp 320w, https://www.danyuschick.com/assets/images/6hZxJid7D8-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/6hZxJid7D8-320.jpeg 320w, https://www.danyuschick.com/assets/images/6hZxJid7D8-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Optionally define a target contrast using color-contrast&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/6hZxJid7D8-320.jpeg&quot; width=&quot;862&quot; height=&quot;178&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The optional third parameter for color-contrast() defines a target contrast ratio. The parameter accepts either a keyword - AA, AA-large, AAA, and AAA-large - or a number. When a target contrast is defined, the first color from the color list that meets or exceeds it is selected.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;OJzWPwe&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/pen/OJzWPwe&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/color-contrast/color-contrast-demo-3.gif&quot; alt=&quot;Results of dynamic target contrasts&quot; /&gt;&lt;/p&gt;
&lt;p&gt;When a target contrast is defined, &lt;code&gt;color-contrast()&lt;/code&gt; will return the first value from the color list that meets the target. However, when no value in the color list meets the target contrast, it&#39;s where the magic happens.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#000 vs #111&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #222 to AA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the base color of black and the color list of two dark shades of grey, there&#39;s no value that would meet the &lt;code&gt;AA (4.5)&lt;/code&gt; target contrast. So, what happens?&lt;/p&gt;
&lt;p&gt;If the color list does not contain a value that meets the target contrast, CSS will fill in the blanks with one that does --- either black or white.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;zYpNzYb&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/pen/zYpNzYb&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/Dryh03fjR--320.webp 320w, https://www.danyuschick.com/assets/images/Dryh03fjR--862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/Dryh03fjR--320.jpeg 320w, https://www.danyuschick.com/assets/images/Dryh03fjR--862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Low contrast results with and without a target contrast defined.&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/Dryh03fjR--320.jpeg&quot; width=&quot;862&quot; height=&quot;334&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;This is where &lt;code&gt;color-contrast()&lt;/code&gt; could really empower design systems to enforce a specific level of accessibility.&lt;/p&gt;
&lt;p&gt;Let&#39;s break this down.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.dark-mode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--bg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--color-list&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #111&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #222&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.dark-mode&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--color-list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;&amp;amp;.with-target&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--bg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--color-list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; to AA&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The magic here happens when the two &lt;code&gt;color&lt;/code&gt; declarations are compared.&lt;/p&gt;
&lt;p&gt;The base &lt;code&gt;.dark-mode&lt;/code&gt; class does not use a target contrast. This results in the &lt;code&gt;color&lt;/code&gt; being defined as &lt;code&gt;#222&lt;/code&gt;, the highest contrasting value from the color list relative to its base color of black. Needless to say, the contrast ratio of &lt;code&gt;1.35&lt;/code&gt; may be the highest, but it&#39;s far from accessible.&lt;/p&gt;
&lt;p&gt;Compare this to when the &lt;code&gt;.dark-mode&lt;/code&gt; and &lt;code&gt;.with-target&lt;/code&gt; classes are combined, and a target contrast is specified. Despite using the same base color and color list, the result is much different. When no value in the color list meets the &lt;code&gt;AA (4.5)&lt;/code&gt; target contrast, the function selects a value that does. In this case, white.&lt;/p&gt;
&lt;p&gt;This is where the potential of &lt;code&gt;color-contrast()&lt;/code&gt; is the brightest.&lt;/p&gt;
&lt;p&gt;In the context of design systems, this would allow a system to enforce a level of color accessibility with very granular control. That level could also be a &lt;code&gt;:root&lt;/code&gt;-scoped custom property allowing the target contrast to be dynamic yet global. There&#39;s a real feeling of control on the product side, but that comes at a cost during the implementation.&lt;/p&gt;
&lt;p&gt;There&#39;s a logical disconnect between the code and the result. The code doesn&#39;t communicate that the color white will be the result. And, of course, that control on the product side translates to uncertainty with the implementation. If a person is using a design system and passes specific colors into their theme, why are black and white being used instead?&lt;/p&gt;
&lt;p&gt;The first concern could be remedied by understanding the &lt;code&gt;color-contrast()&lt;/code&gt; feature more deeply, and the second could be alleviated by clear, communicative documentation. However, in both cases, this shifts the burden of expectation onto the implementation side, which is not ideal.&lt;/p&gt;
&lt;p&gt;In some cases, the explicit control will justify the costs. However, there are other drawbacks to &lt;code&gt;color-contrast()&lt;/code&gt; that will need to be considered in all cases.&lt;/p&gt;
&lt;h2&gt;Not All That Glitters Is Gold&lt;/h2&gt;
&lt;p&gt;There are inevitable drawbacks to consider, as with any experimental or new feature, and &lt;code&gt;color-contrast()&lt;/code&gt; is no different.&lt;/p&gt;
&lt;h3&gt;Color and Visual Contrasts are Different Things&lt;/h3&gt;
&lt;p&gt;When using &lt;code&gt;color-contrast()&lt;/code&gt; to determine text color based on its background, the function is comparing exactly that --- the colors. What &lt;code&gt;color-contrast()&lt;/code&gt; &lt;em&gt;does not&lt;/em&gt; take into consideration are other styles that may affect visual contrast, such as font size, weight, and opacity.&lt;/p&gt;
&lt;p&gt;This means it&#39;s possible to have a color pairing that technically meets a specific contrast threshold but still results in an inaccessible text because its size is too small, weight is too light, or its opacity is too transparent.&lt;/p&gt;
&lt;p&gt;To learn more about accessible typography, I highly recommend Carie Fisher&#39;s talk, &amp;quot;&lt;a href=&quot;https://www.deque.com/axe-con/sessions/accessible-typography-essentials/&quot;&gt;Accessible Typography Essentials&lt;/a&gt;.&amp;quot;&lt;/p&gt;
&lt;h3&gt;Custom Properties and Fallbacks&lt;/h3&gt;
&lt;p&gt;Since CSS custom properties support fallback values for when the property is not defined, it seemed like a good approach to use &lt;code&gt;color-contrast()&lt;/code&gt; as a progressive enhancement.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;--article-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#000 vs #333&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-color&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--fallback-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If &lt;code&gt;color-contrast()&lt;/code&gt; is not supported, the &lt;code&gt;--article-color&lt;/code&gt; property would not be defined, and therefore the &lt;code&gt;--fallback-color&lt;/code&gt; would be used. Unfortunately, that&#39;s not how this works.&lt;/p&gt;
&lt;p&gt;An interesting thing happens in unsupported browsers --- the custom property would be defined with the function itself. Here&#39;s an example of this from Chrome DevTools:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-69j7KN0BV-320.webp 320w, https://www.danyuschick.com/assets/images/-69j7KN0BV-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-69j7KN0BV-320.jpeg 320w, https://www.danyuschick.com/assets/images/-69j7KN0BV-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Unsupported browsers, like Chrome, will use color-contrast() as a value&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/-69j7KN0BV-320.jpeg&quot; width=&quot;862&quot; height=&quot;61&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Because the &lt;code&gt;--article-color&lt;/code&gt; property is technically defined, the fallback won&#39;t trigger.&lt;/p&gt;
&lt;p&gt;However, that&#39;s not to say &lt;code&gt;color-contrast()&lt;/code&gt; can&#39;t be used progressively, though. It can be paired with the &lt;code&gt;@supports()&lt;/code&gt; function, but be mindful if you decide to do so. As exciting as it may be, with such limited support and potential for syntax and/or functionality changes, it may be best to hold off on sprinkling this little gem throughout an entire codebase.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#000 vs #fff&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #eee&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--article-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--article-color&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; vs #fff&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The Highest Contrast Doesn&#39;t Mean Accessible Contrast&lt;/h3&gt;
&lt;p&gt;Despite the control &lt;code&gt;color-contrast()&lt;/code&gt; can offer with colors and themes, there are still limitations. When the function compares the base color against the list and no target contrast is specified, it will select the highest contrasting value. Just because the two colors offer the greatest contrast ratio, it doesn&#39;t mean it&#39;s an accessible one.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #000&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;color-contrast&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#000 vs #111&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; #222&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the background color of black. &lt;code&gt;#000&lt;/code&gt; is compared against two shades of dark grey. While &lt;code&gt;#222&lt;/code&gt; would be selected for having the &amp;quot;greatest&amp;quot; contrast ratio, pairing it with black would be anything but great.&lt;/p&gt;
&lt;h3&gt;No Gradient Support&lt;/h3&gt;
&lt;p&gt;In hindsight, it was maybe a touch ambitious trying gradients with &lt;code&gt;color-contrast()&lt;/code&gt;. Nevertheless, through some testing, it seems gradients are not supported. Which, once I thought about it, makes sense.&lt;/p&gt;
&lt;p&gt;If a gradient transitioned from black to white, what would the base color be? And wouldn&#39;t it need to be relative to the position of the content? It&#39;s not like the function can interpret the UI. However, Michelle Barker has experimented with &lt;a href=&quot;https://codepen.io/michellebarker/pen/LYQPYoq&quot;&gt;using CSS color-mix() and color-contrast() together&lt;/a&gt; to support this exact use case.&lt;/p&gt;
&lt;p&gt;It&#39;s not you, &lt;code&gt;color-contrast()&lt;/code&gt;, it&#39;s me. Well, it&#39;s actually the gradients, but you know what I mean.&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;That was a lot of code and demos, so let&#39;s take a step back and review &lt;code&gt;color-contrast()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The function compares a base color against a color list, then selects the highest contrasting value. Additionally, it can compare those values against a target contrast ratio and either select the first color to meet that threshold or use a dynamic color that does. Pair this with progressive enhancement, and we&#39;ve got a feature that can drastically improve web accessibility.&lt;/p&gt;
&lt;p&gt;I believe there are still plenty of unexplored areas and use cases for &lt;code&gt;color-contrast()&lt;/code&gt;, so I want to end this article with some additional thoughts and/or questions.&lt;/p&gt;
&lt;p&gt;How do you see this feature being leveraged when working with different color modes, like light, dark, and high contrast? Could a React-based design system expose an optional &lt;code&gt;targetContrast&lt;/code&gt; prop on its &lt;code&gt;ThemeProvider&lt;/code&gt; in order to enforce accessibility if the theme falls short? Would there be a use case for the function to return the lowest contrasting value instead? If there were two base colors, could the function be used to find the best contrasting value between them?&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deque.com/axe-con/sessions/new-css-with-accessibility-in-mind/&quot;&gt;&amp;quot;New CSS with Accessibility in Mind&amp;quot;&lt;/a&gt;, Rachel Andrew&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://css-tricks.com/exploring-color-contrast-for-the-first-time/&quot;&gt;&amp;quot;Exploring color-contrast() for the First Time&amp;quot;&lt;/a&gt;, Chris Coyier&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-contrast%28%29&quot;&gt;&lt;code&gt;Color-Contrast()&lt;/code&gt; on MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://caniuse.com/?search=color-contrast%28%29&quot;&gt;Support stats on caniuse.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3.org/TR/css-color-5/#colorcontrast&quot;&gt;&lt;code&gt;Color-Contrast()&lt;/code&gt; on W3 Color Module Level 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 May 2022 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/manage-accessible-design-system-themes-with-css-color-contrast/</guid>
      </item>
      
      <item>
        <title>5 Accessibility Quick Wins You Can Implement Today</title>
        <link>https://www.danyuschick.com/articles/5-accessibility-quick-wins-you-can-implement-today/</link>
        <description>&lt;p&gt;Let’s face it: building an AA or AAA-accessible product can be quite daunting. Luckily, having an accessible product isn’t all-or-nothing. Even seemingly small improvements can have nice quality of life benefits for many people.&lt;/p&gt;
&lt;p&gt;In that spirit, here are five accessibility quick wins you can implement today.&lt;/p&gt;
&lt;h2&gt;Quick Win 1: Indicate the Current Page&lt;/h2&gt;
&lt;p&gt;It’s probably safe to assume that a different style is the most common way to communicate the current page of a site or app. However, even if those styles are clear and with great contrast ratios, they’re still only a visual cue.&lt;/p&gt;
&lt;p&gt;So what happens if a person with limited vision cannot see that separation? How will they know what page they’re on?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Creating an accessible product is to ensure its markup communicates as clearly as its design.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Adding &lt;code&gt;aria-current=&amp;quot;page&amp;quot;&lt;/code&gt; to the active navigation element is one way to ensure markup and design communicate the same information with or without assistive technologies.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-current&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Home&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;🎉 Bonus&lt;/h3&gt;
&lt;p&gt;Use CSS attribute selectors to style the &lt;code&gt;[aria-current=&amp;quot;page&amp;quot;]&lt;/code&gt; element to keep the visual and markup cues linked.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;[aria-current=&quot;page&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;/* Active link styles */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Quick Win 2: Document Language&lt;/h2&gt;
&lt;p&gt;While some people can visit a website and determine the language or locale of its content, not all people have that luxury. Again, markup must communicate the same information as the visual design — even if that information may seem implied.&lt;/p&gt;
&lt;p&gt;Add the &lt;code&gt;lang&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag to communicate not only the document’s language, but its locale. This will help assistive technologies like screen readers understand and communicate the content. Even if the app only supports one language, this can be a nice quality of life improvement for many people.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;en-US&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For apps which support multiple languages, the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element is likely not the only one to need its &lt;code&gt;lang&lt;/code&gt; value defined. Use the &lt;code&gt;lang&lt;/code&gt; attribute on specific elements whose language differs from the rest of the document, like links within a language toggle menu. In this case, pair the use of &lt;code&gt;lang&lt;/code&gt; with &lt;a href=&quot;https://developers.google.com/search/docs/advanced/crawling/localized-versions&quot;&gt;the &lt;code&gt;hreflang&lt;/code&gt; attribute&lt;/a&gt; to not only communicate the language of the link itself, but also of its destination.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fi&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;hreflang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;fi&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;/&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Suomeksi&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;bdi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Suomeksi&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;bdi&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Quick Win 3: Use &lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Whether drawing attention to actions or updates, or creating a sense of life and charm, adding motion to an app can really elevate its experience. However, some people may find that experience disorienting.&lt;/p&gt;
&lt;p&gt;Windows and MacOS both offer a setting at the OS level for people to greatly reduce the amount of motion when using their systems. The &lt;a href=&quot;https://css-tricks.com/revisiting-prefers-reduced-motion/&quot;&gt;&lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt; setting can greatly improve the experience on a computer, but it does not extends beyond the UI of the operating system. So wouldn’t it be nice if our apps could respect that same system setting and provide a more static experience for those who prefer it?&lt;/p&gt;
&lt;p&gt;Well, with CSS media queries, they can.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;prefers-reduced-motion&lt;/code&gt; media query can be used to greatly reduce or remove all motion from an app whenever the system setting is enabled.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-default-tab=&quot;result&quot; data-slug-hash=&quot;zYEgoEp&quot; data-user=&quot;DanielYuschick&quot;&gt;
    &lt;span&gt;&lt;a href=&quot;https://codepen.io/DanielYuschick/pen/zYEgoEp&quot;&gt;See the pen&lt;/a&gt; (&lt;a href=&quot;https://codepen.io/DanielYuschick&quot;&gt;@DanielYuschick&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;
    &lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; reduce&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;animation-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.01ms &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;animation-iteration-count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1 &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;transition-duration&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.01ms &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;scroll-behavior&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto &lt;span class=&quot;token important&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The blanket approach shown here prevents all motion, &lt;a href=&quot;https://css-tricks.com/nuking-motion-with-prefers-reduced-motion/&quot;&gt;but it can leave little room for nuance&lt;/a&gt;. It’d be best to review the needs of those using the product, but consider these other options as well.&lt;/p&gt;
&lt;p&gt;One approach could be to only animate one property at a time in &lt;code&gt;prefers-reduced-motion&lt;/code&gt; settings. So consider a &lt;code&gt;&amp;lt;Modal /&amp;gt;&lt;/code&gt; that fades and scales into view with &lt;code&gt;opacity&lt;/code&gt; and &lt;code&gt;transform&lt;/code&gt;. In reduced motion environments, only the &lt;code&gt;opacity&lt;/code&gt; would transition. The scaling effect would be removed as they are more commonly problematic than fading.&lt;/p&gt;
&lt;p&gt;Another option could be to look at the &lt;code&gt;prefers-reduced-motion&lt;/code&gt; environment a bit more literally and remove all &lt;em&gt;motion&lt;/em&gt;. This would do away with our scaling modals, sliding drawers, and bouncing notifications, but would still leave room for color transitions on links and buttons.&lt;/p&gt;
&lt;h2&gt;Quick Win 4: Indicate Data Sorting State&lt;/h2&gt;
&lt;p&gt;A common theme across all of these tips is to ensure that an app’s visual design and markup communicate the same things. So, when the design uses an arrow to indicate the sort direction of a table column, how can that also be communicated in the markup?&lt;/p&gt;
&lt;p&gt;Setting the &lt;code&gt;aria-sort&lt;/code&gt; attribute to &lt;code&gt;ascending&lt;/code&gt; /&lt;code&gt;descending&lt;/code&gt; on the header of the actively-sorted column allows the markup to communicate the same content structure as a visual indicator in the UI.&lt;/p&gt;
&lt;p&gt;This will help ensure that people using assistive technologies and those who aren’t can understand the content in the same way.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;thead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;th&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;First Name&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;th&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;th&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-sort&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;ascending&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Last Name&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;th&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;thead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Quick Win 5: Lazy Loading Lists&lt;/h2&gt;
&lt;p&gt;Whether scrolling through an endless stream of tweets or through an impossible-to-decide list of products, the web has fully embraced lazy loading long lists (and alliteration, apparently).&lt;/p&gt;
&lt;p&gt;This is when the &lt;code&gt;aria-setsize&lt;/code&gt; and &lt;code&gt;aria-posinset&lt;/code&gt; attributes become very valuable. While a person’s progression through the list can be communicated visually in many different ways, these attributes are used to communicate that same progression to many assistive technologies.&lt;/p&gt;
&lt;p&gt;As developers, we likely have access to the length of an entire list as well as the index of the current items being displayed. With that, the &lt;code&gt;aria-setsize&lt;/code&gt; attribute would define the total length of the list, while the &lt;code&gt;aria-posinset&lt;/code&gt; attribute would define an item’s specific position (or index) within that list.&lt;/p&gt;
&lt;p&gt;If the total length of the list is not known, then &lt;code&gt;aria-setsize&lt;/code&gt; should be set to &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With these attributes, assistive technologies can better interpret a list and a person can better understand their position within it.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h2&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;top-artists-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Top Artists of 2021&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;listbox&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-labelledby&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;top-artists-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;option&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-setsize&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;20&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-posinset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;5&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Bloodbound&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;option&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-setsize&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;20&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-posinset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;6&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Manimal&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;option&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-setsize&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;20&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;aria-posinset&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;7&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Powerwolf&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a listen to how these attributes are announced using MacOS VoiceOver.&lt;/p&gt;
&lt;div class=&quot;media-embed-wrapper&quot;&gt;
    &lt;div style=&quot;padding:56.25% 0 0 0;position:relative;&quot;&gt;
    &lt;iframe src=&quot;https://player.vimeo.com/video/672659433?h=88c93cde2a&amp;amp;badge=0&amp;amp;autopause=0&amp;amp;player_id=0&amp;amp;app_id=58479&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; fullscreen; picture-in-picture&quot; allowfullscreen=&quot;&quot; style=&quot;position:absolute;top:0;left:0;width:100%;height:100%;&quot; title=&quot;Aria SetSize Demo&quot;&gt;&lt;/iframe&gt;
    &lt;/div&gt;
    &lt;/div&gt;
    &lt;script src=&quot;https://player.vimeo.com/api/player.js&quot;&gt;&lt;/script&gt;
&lt;h2&gt;🎉 Bonus Win: Axe-DevTools Extension&lt;/h2&gt;
&lt;p&gt;Implementing those five accessibility quick wins is a great start, but that’s exactly what it is — a start. There’s a sprawling landscape of assistive technologies and sets of abilities a person can posses, and navigating it all alone can feel overwhelming.&lt;/p&gt;
&lt;p&gt;Fortunately, there are plenty of tools to help with auditing a product’s accessibility that make the journey much more manageable. My personal favorite — my trusty accessibility compass — is the &lt;a href=&quot;https://www.deque.com/axe/devtools/&quot;&gt;Axe-DevTools browser extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Running the Axe-DevTools accessibility scanner can return tons of valuable information. Not only will it display all issues and warnings found on the page, but it groups them by approximate severity. It can also highlight the element on the page or in the Elements tab and provide links to learn more about the specific issue.&lt;/p&gt;
&lt;p&gt;However, most importantly, it will offer clear and concise approaches to fix the specific issue.&lt;/p&gt;
&lt;p&gt;An example of an Axe Dev Tools accessibility scan result.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/eKgSEdgKiD-320.webp 320w, https://www.danyuschick.com/assets/images/eKgSEdgKiD-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/eKgSEdgKiD-320.jpeg 320w, https://www.danyuschick.com/assets/images/eKgSEdgKiD-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Preview of Axe-DevTools scan results.&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/eKgSEdgKiD-320.jpeg&quot; width=&quot;862&quot; height=&quot;437&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;A product isn’t made accessible overnight; nor is a product’s accessibility work ever really complete. Like anything else on the web, accessibility evolves and requires maintenance. However, even seemingly small additions can have an impact on a product’s accessibility and a person’s overall experience.&lt;/p&gt;
&lt;p&gt;After stepping into a new codebase, these are often some of the first few things I look into — some “low-hanging fruit” of accessibility, if you will.&lt;/p&gt;
&lt;p&gt;Reaching AAA or even AA conformance can feel like scaling an 8,000 meter peak. These steps won’t carry you to the summit, but an expedition is never completed in a single stride.&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-current&quot;&gt;Learn more about the &lt;code&gt;aria-current&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang&quot;&gt;Learn more about the &lt;code&gt;lang&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel#attr-alternate&quot;&gt;Learn more about the &lt;code&gt;hreflang&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion&quot;&gt;Learn more about &lt;code&gt;prefers-reduced-motion&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-sort&quot;&gt;Learn more about the &lt;code&gt;aria-sort&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-setsize&quot;&gt;Learn more about the &lt;code&gt;aria-setsize&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-posinset&quot;&gt;Learn more about the &lt;code&gt;aria-posinset&lt;/code&gt; attribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deque.com/axe/devtools/&quot;&gt;Axe-DevTools browser extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/DanielYuschick&quot;&gt;Follow @DanielYuschick on Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 23 Feb 2022 02:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/5-accessibility-quick-wins-you-can-implement-today/</guid>
      </item>
      
      <item>
        <title>Logical CSS with Styled Components Mixins</title>
        <link>https://www.danyuschick.com/articles/logical-css-with-styled-components-mixins/</link>
        <description>&lt;p&gt;Sometimes it feels masochistic to be a frontend developer. I regularly come across articles or tweets with new features that will improve my day-to-day workflow or solve a cumbersome, but consistent, problem and I get excited. I just can&#39;t help it. I let my mind celebrate in the streets of all the different uses cases I can imagine.&lt;/p&gt;
&lt;p&gt;Then I review the browser support and immediately my proverbial parade is doused in the rain that is reality.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/M28rUlcjueKUE/giphy.gif&quot; alt=&quot;Stitch, from the animated movie Lilo and Stitch, cries in the rain.&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;The Lure of Logical CSS&lt;/h2&gt;
&lt;p&gt;My dead little heart fluttered to life when I learned of the evolution to Logical CSS. I experimented with the new properties and, ultimately, wrote a post of my own about the topic. In that post, &lt;a href=&quot;https://dev.to/yuschick/css-logical-properties-are-the-future-of-the-web-i18n-11i1&quot;&gt;Logical CSS is the Future of the Web and I18n&lt;/a&gt;, I included code snippets to help others get started with the new concepts today.&lt;/p&gt;
&lt;p&gt;However, as I started using those snippets myself, leveraging &lt;code&gt;@supports&lt;/code&gt; queries everywhere for physical CSS fallbacks, I learned three things very quickly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; This approach quickly bloated the styles and became difficult to read and work with&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Relying on multiple developers with varying understandings of CSS to make the switch wasn&#39;t smooth or positive for anybody&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; When fallbacks are no longer needed, a ton of files will need to be edited, each increasing the risk of regressions&lt;/p&gt;
&lt;p&gt;I&#39;ve spent years now working in stacks built around React and Styled Components where the name of the game is componentization to reduce duplication and centralize logic. How could I leverage these fundamentals to address the major drawbacks of trying to use logical CSS today?&lt;/p&gt;
&lt;h2&gt;Mixins with Styled Components&lt;/h2&gt;
&lt;p&gt;If you also come from a SASS (or LESS) background, the concept of mixins probably isn&#39;t new. Essentially, a mixin is a block of styles that can be seen like a component in the sense that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A set of styles are written as a standalone block&lt;/li&gt;
&lt;li&gt;Those styles can be imported and used many times&lt;/li&gt;
&lt;li&gt;The set can support props to dynamically alter values throughout lifecycles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While Styled Components doesn&#39;t have anything out of the box for mixins, &lt;em&gt;per se&lt;/em&gt;, we can use it to achieve exactly what we need.&lt;/p&gt;
&lt;p&gt;First, let&#39;s look at a set of styles I found myself repeating over, and over again.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SomeComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  inline-size: 100%;&lt;br /&gt;  max-inline-size: 50rem;&lt;br /&gt;&lt;br /&gt;  @supports not (inline-size: 100%) {&lt;br /&gt;    max-width. 50rem;&lt;br /&gt;    width: 100%;&lt;br /&gt;  }&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you may be able to imagine, writing logical CSS first with the various &lt;code&gt;@supports&lt;/code&gt; queries after can quickly balloon into a mess.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;const SomeComponent = styled.div`&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;border-block-start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid orange&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;block-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;inline-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;margin-inline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;max-inline-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;inline-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    max-width. 50rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;border-block-start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid orange&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;border-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1px solid orange&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;block-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 15rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;margin-inline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; auto&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0 auto&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;`&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And just like that, we have an amalgamation of 🤮🤮🤮. It&#39;s not quick to write, nor easy to keep consistent across a codebase, and not much fun to read again later. But I kept doing it, convinced it was the way to go.&lt;/p&gt;
&lt;p&gt;Fool me once, shame on you. Fool me a bunch of times over a few-week period, and, I don&#39;t know, fire me?&lt;/p&gt;
&lt;p&gt;But eventually, the connections started to spark and the idea finally formed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mixins&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If I could extract this repeated and cumbersome work out into a dynamic block, I could achieve cleaner working code, and easier consistency across developers.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mixins.js&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; css &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &#39;styled&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;components´&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maxHeight&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maxWidth&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; css&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  block-size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;height&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  inline-size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;width&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  max-block-size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;maxHeight&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  max-inline-size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;maxWidth&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;&lt;br /&gt;  @supports not (block-size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;height&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;) {&lt;br /&gt;    height: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;height&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;    maxHeight: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;maxHeight&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  }&lt;br /&gt;&lt;br /&gt;  @supports not (inline-size: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;width&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;) {&lt;br /&gt;    max-width. &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;maxWidth&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;    width: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;width&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;  }&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Component.js&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Size &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Mixins&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SomeComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div`&lt;br /&gt;  $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;15rem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;50rem&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;100%&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;`&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, by using the &lt;code&gt;Size&lt;/code&gt; mixin, I&#39;m able to render a block of logical CSS with physical fallbacks while keeping my working styles much cleaner and with a more familiar terminology.&lt;/p&gt;
&lt;h2&gt;The Mixins&lt;/h2&gt;
&lt;p&gt;Let&#39;s break down what&#39;s happening with our &lt;code&gt;Size&lt;/code&gt; mixin.&lt;/p&gt;
&lt;p&gt;First, we import the &lt;code&gt;css&lt;/code&gt; helper function from Styled Components. By wrapping our styles in this, we can ensure they receive potential vendor prefixes and other Styled Components magic.&lt;/p&gt;
&lt;p&gt;Next, we create a function called &lt;code&gt;Size&lt;/code&gt; that accepts an object of defined, but optional, values. If a value isn&#39;t provided, that style is merely skipped during build, thus ensuring our rendered styles are no less clean.&lt;/p&gt;
&lt;p&gt;Lastly, in our component file, we import the function, and call it from within our styled &lt;code&gt;div&lt;/code&gt;. We pass in only the sizes we need, with the property names we already know &lt;em&gt;(and which also happen to be shorter and more conducive to key/value pairs)&lt;/em&gt; and as a result, have a cleaner set of styles with all the functionality we desire.&lt;/p&gt;
&lt;h2&gt;Looking Back&lt;/h2&gt;
&lt;p&gt;Let&#39;s revisit the original issues with writing logical CSS now and see if, and how, our &lt;code&gt;Size&lt;/code&gt; mixin addresses them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; By using the mixin, we now have a single function call in place of the multiple lines of styles previously written. Code readability is somewhat subjective, but for me, that&#39;s a major win.&lt;sup&gt;1&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;With this mixin, my styled &lt;code&gt;div&lt;/code&gt; is now quicker to write, easier to read, and, getting into our second point, easier for others to incorporate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; At the time of writing this in March 2021, not every frontend developer I know is aware of logical CSS. &lt;strong&gt;That&#39;s okay&lt;/strong&gt;. But with this mixin, they don&#39;t really have to be. Sure, it&#39;s valuable to demonstrate the shift, but with a single function using familiar terminology, this is a much lower bar of entry than relearning the entire box model.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Lastly, that brings us to the eventual world we&#39;ll all live in one day, one where logical CSS is the standard and broadly supported everywhere. With this mixin acting as the single source of truth, if we want to delete the fallback, we do it in one place and give ourselves the rest of the day to, I don&#39;t know, ride hoverboards with our robot friends, or something.&lt;/p&gt;
&lt;p&gt;But we&#39;re not done yet. We can go further.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Way further.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Styles with Type Checking&lt;/h2&gt;
&lt;p&gt;A primary goal of mine when it comes to styling, theming, and optimizations of this nature is to minimize the work it takes to go from design to code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design tools provide values in px, but the frontend assigns rem values to arbitrary t-shirt sizes. 🤯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My goal is to be able to look at InVision, see a &lt;code&gt;padding&lt;/code&gt; of &lt;code&gt;16px&lt;/code&gt; and be able to write my styles using only that piece of information without having to cross check and reference multiple files.&lt;/p&gt;
&lt;p&gt;So let&#39;s take a look at the &lt;code&gt;Size&lt;/code&gt; mixin again, but now with type checking.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SizeProps&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  height&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  maxHeight&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  maxWidth&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  width&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Size&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maxHeight&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; maxWidth&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; width &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; SizeProps&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;  css&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; ... &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when I use this mixin later, I can take the numeric pixel value, convert it to &lt;code&gt;rem&lt;/code&gt; units &lt;em&gt;(using a helper function which accepts a number and returns a rem string)&lt;/em&gt; and have my logical CSS styles written with nothing more than what the designs had given me.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; pxToRem &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utils/theme&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; SomeComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styled&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;div`&lt;br /&gt;  $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pxToRem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;`&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Bonus: Feel free to extend the type checking to exclude any strings containing &lt;code&gt;px&lt;/code&gt;. Or only accept the relative units you&#39;d like to support.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, we have our handy dandy mixin, with super fancy type checking, and all is well in the world.&lt;/p&gt;
&lt;h2&gt;All. The. Mixins.&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/XD4fdNUOnAPyuX6YP1/giphy.gif&quot; alt=&quot;Homer Simpson at a fair asking a cook &amp;quot;can you make it all in one thing and fry it?&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;If you&#39;re familiar with logical CSS, you know that there are quite a few properties other than &lt;code&gt;block-size&lt;/code&gt; and &lt;code&gt;inline-size&lt;/code&gt; that are being rolled out. Properties like &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;padding&lt;/code&gt; and even &lt;code&gt;border&lt;/code&gt; have their new logical variations.&lt;/p&gt;
&lt;p&gt;So why wait? Here&#39;s a &lt;a href=&quot;https://gist.github.com/yuschick/fce07ec3914cf87b9f6502e0d7cde808&quot;&gt;Gist&lt;/a&gt; containing mixins for Border, BorderRadius, Margin, Padding, Position, and Size.&lt;/p&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;No matter how much you may love being a developer, you typically want to write less code. Not more. This is usually what drives all these new technologies we get so excited over.&lt;/p&gt;
&lt;p&gt;By creating these mixins with Styled Components to enable writing consistent logical CSS in projects now, I feel like I&#39;m getting both – less code with more features.&lt;/p&gt;
&lt;p&gt;And masochistic or not, there will always be rain. Just find ways to keep dancing in it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/gmjyeGnoChH5n3eOXS/giphy.gif&quot; alt=&quot;Kamala Harris dancing in the rain under a blue umbrella.&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/yuschick/fce07ec3914cf87b9f6502e0d7cde808&quot;&gt;Mixins Gist&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/yuschick/css-logical-properties-are-the-future-of-the-web-i18n-11i1&quot;&gt;Logical CSS is the Future of the Web and I18n&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 27 Mar 2021 02:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/logical-css-with-styled-components-mixins/</guid>
      </item>
      
      <item>
        <title>Avoiding Common Theming Pitfalls with React and Styled Components</title>
        <link>https://www.danyuschick.com/articles/avoiding-common-theming-pitfalls-with-react-and-styled-components/</link>
        <description>&lt;p&gt;It&#39;s no secret that as products expand and development teams grow or change over, codebases begin to suffer from styling inconsistencies. Whether it be with element sizes, colors, or general &#39;magic numbers&#39; littering the files, there are common approaches to minimizing these issues. While some products justify being split into a standalone component library, I want to look at the ones that need only a solid theme at its base to be the source of styling truth.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While this article will focus on React projects using &lt;a href=&quot;https://styled-components.com/&quot;&gt;Styled Components&lt;/a&gt;, a lot of these challenges and approaches are technology agnostic and applicable across most frontend stacks.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Theming&lt;/h2&gt;
&lt;p&gt;Regardless of how a project consumes its theme, whether through a provider, by importing various theme objects, or by custom properties on the project&#39;s &lt;code&gt;:root&lt;/code&gt;, the themes themselves are often quite similar. It&#39;s common to store theme data in a single file, one per theme, and while this itself isn&#39;t a major pitfall, it does have inherent risks --- risks that we&#39;ll cover later.&lt;/p&gt;
&lt;h2&gt;Goals&lt;/h2&gt;
&lt;p&gt;Before building our theme, let&#39;s take a step back and think about two things, &lt;strong&gt;1)&lt;/strong&gt; the goals of a theme and, &lt;strong&gt;2)&lt;/strong&gt; the pain points of using themes in the past.&lt;/p&gt;
&lt;p&gt;With these in mind, my approach to theming aims to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplify the learning curve when stepping into a new codebase&lt;/li&gt;
&lt;li&gt;Make reading and writing styles quicker and more intuitive&lt;/li&gt;
&lt;li&gt;Define a versatile naming convention that&#39;s relevant across themes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Admittedly, these are abstract and somewhat subjective goals that are difficult to quantify, but as we move ahead and look at four frequent components of a theme, I&#39;ll try to make clear how certain approaches meet these goals.&lt;/p&gt;
&lt;p&gt;Let&#39;s go.&lt;/p&gt;
&lt;h2&gt;Color Naming &amp;amp; Organization&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;We lose time figuring out if a HEX code is lightDarkGrey or darkLightGrey and we&#39;re all worse off because of it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Naming is always considered as one of the most difficult parts of development and naming colors in a theme is no exception.&lt;/p&gt;
&lt;h3&gt;The Pitfall(s)&lt;/h3&gt;
&lt;p&gt;There are a few common ways I&#39;ve seen colors named in themes and each have their pitfalls.&lt;/p&gt;
&lt;h3&gt;Generic Color Descriptions&lt;/h3&gt;
&lt;p&gt;When naming colors with generic color descriptions, like &lt;code&gt;grey&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt;, a theme quickly becomes a mishmash of difficult-to-understand names. Several products I&#39;ve worked on have included names like &lt;code&gt;lighterLightGrey&lt;/code&gt;, &lt;code&gt;darkestDarkGrey&lt;/code&gt;, and &lt;code&gt;maroonRedDeep&lt;/code&gt;. Naming becomes an immense challenge that is hard to scale and remember without always checking.&lt;/p&gt;
&lt;h3&gt;CSS Color Keywords&lt;/h3&gt;
&lt;p&gt;Using the CSS color keywords like &lt;code&gt;honeydew&lt;/code&gt;, &lt;code&gt;lightseagreen&lt;/code&gt;, and &lt;code&gt;orangered&lt;/code&gt; can seem like an uncomplicated way to keep names distinct, and admittedly, it does. However, for me personally, I struggle with all the different names as it&#39;s a lot to remember. I mean, I don&#39;t even know what color a honeydew is.&lt;/p&gt;
&lt;p&gt;Another area this method breaks down, as does the generic color descriptions approach, is when themes change. In a light theme, &lt;code&gt;honeydew&lt;/code&gt; will be just that, but once the theme is switched to dark, &lt;code&gt;honeydew&lt;/code&gt; may now refer to a value that is not, in fact, &lt;code&gt;honeydew&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Purpose-Based Naming&lt;/h3&gt;
&lt;p&gt;Lastly, another naming convention I have often seen is the purpose- or function-based naming like &lt;code&gt;headerBackground&lt;/code&gt;. This is generally fine until the design requires that same &lt;code&gt;headerBackground&lt;/code&gt; color to be used on button text. It&#39;s possible to create a &lt;code&gt;buttonText&lt;/code&gt; color with the same value, and isn&#39;t the worst thing that could be done, but reading and writing the button text color as &lt;code&gt;headerBackground&lt;/code&gt; doesn&#39;t feel right, and creates conflicts of purpose as soon as one or the other needs to change.&lt;/p&gt;
&lt;h2&gt;My Approach&lt;/h2&gt;
&lt;p&gt;Back in the day, I got into frontend development by way of design. I&#39;m used to creating styleguides and defining color palettes. When doing so, and even when reviewing styleguides since, many designers break their colors into groups, like &lt;code&gt;core&lt;/code&gt;, &lt;code&gt;accent&lt;/code&gt;, and &lt;code&gt;aux&lt;/code&gt;. Each group generally consists of a handful of colors. Some more. Some less.&lt;/p&gt;
&lt;p&gt;If the designers divide the mental model of their color palette, why shouldn&#39;t we consider doing the same?&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/TKfWWgkda4-320.webp 320w, https://www.danyuschick.com/assets/images/TKfWWgkda4-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/TKfWWgkda4-320.jpeg 320w, https://www.danyuschick.com/assets/images/TKfWWgkda4-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of color naming in themes&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/TKfWWgkda4-320.jpeg&quot; width=&quot;862&quot; height=&quot;976&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Of course, it &lt;em&gt;is&lt;/em&gt; possible to combine approaches. For example, brand colors rarely change between light and dark modes, so those colors can be nested with generic or keyword names, while the other groups retain the &lt;code&gt;primary/secondary&lt;/code&gt; and &lt;code&gt;positive/negative&lt;/code&gt; naming conventions.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/Tp6CHb_L6x-320.webp 320w, https://www.danyuschick.com/assets/images/Tp6CHb_L6x-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/Tp6CHb_L6x-320.jpeg 320w, https://www.danyuschick.com/assets/images/Tp6CHb_L6x-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of combining color naming approaches&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/Tp6CHb_L6x-320.jpeg&quot; width=&quot;862&quot; height=&quot;436&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;While this approach isn&#39;t perfect---it still requires a lot to remember, and is difficult to expand beyond &lt;code&gt;tertiary&lt;/code&gt; ---I find that the naming patterns and flexibility across themes keeps code consistent to read and write.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Naming Convention Pattern:&lt;/strong&gt; By nesting color groups, names are scoped and can be repeated to create a consistent naming pattern.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theme-Agnostic Naming:&lt;/strong&gt; Lastly, when changing between themes, the naming convention holds. Whether the overall theme is &lt;code&gt;light&lt;/code&gt; or &lt;code&gt;dark&lt;/code&gt;, the &lt;code&gt;CancelButton&lt;/code&gt; background color will read as the same theme-agnostic value.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Decent Readability:&lt;/strong&gt; While using variables this way can become verbose, I believe the tradeoffs for readability and writability(?) are worthwhile.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/9ruTleF299-320.webp 320w, https://www.danyuschick.com/assets/images/9ruTleF299-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/9ruTleF299-320.jpeg 320w, https://www.danyuschick.com/assets/images/9ruTleF299-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example showing scoped color naming in use&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/9ruTleF299-320.jpeg&quot; width=&quot;862&quot; height=&quot;390&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2&gt;Font Sizes&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Design tools provide font sizes in &lt;code&gt;px&lt;/code&gt;, but the frontend assigns &lt;code&gt;rem&lt;/code&gt; values to arbitrary t-shirt sizes. What?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The importance of consistent font sizes can rarely be overstated. Font sizes can visually create a data hierarchy at a glance where our peripheral vision assigns importance to content long before we start to read it. Inconsistencies in font sizes can disrupt that visual flow, and pull attention away from where it should be.&lt;/p&gt;
&lt;h2&gt;The Pitfall(s)&lt;/h2&gt;
&lt;p&gt;Naming values for font sizes is difficult by itself, but when this is paired with converting between value units, this becomes a painful aspect of theming.&lt;/p&gt;
&lt;h3&gt;A Beautiful Mind Required&lt;/h3&gt;
&lt;p&gt;When reviewing designs in tools like InVision, font sizes are often provided with a &lt;code&gt;px&lt;/code&gt; value. However, our frontends usually size fonts with a more dynamic unit like &lt;code&gt;rem&lt;/code&gt;. But then those &lt;code&gt;rem&lt;/code&gt; values are assigned to arbitrary shirt sizes that have no real relation to the value they represent.&lt;/p&gt;
&lt;p&gt;So as a developer, I have to take a &lt;code&gt;px&lt;/code&gt; value, divide that by our base site value to determine the &lt;code&gt;rem&lt;/code&gt; equivalent, and then match that to the appropriate shirt size variable name in the theme.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/0*tl0dsa8pJ57IO0sj.gif&quot; alt=&quot;Stephan A. Smith shaking his head, confused, with math symbols floating around his head.&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;My Approach&lt;/h2&gt;
&lt;p&gt;I&#39;ve done the t-shirt sizes many times. I&#39;ve tried functional naming like &lt;code&gt;headline&lt;/code&gt; or &lt;code&gt;subtitle&lt;/code&gt;, but naming has always been the &lt;em&gt;second&lt;/em&gt; part of the problem. The &lt;em&gt;first&lt;/em&gt; has always been converting from &lt;code&gt;px&lt;/code&gt; to &lt;code&gt;rem&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So I wanted to address the problem there.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/eAAdYFl-Az-320.webp 320w, https://www.danyuschick.com/assets/images/eAAdYFl-Az-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/eAAdYFl-Az-320.jpeg 320w, https://www.danyuschick.com/assets/images/eAAdYFl-Az-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of a theme font size function&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/eAAdYFl-Az-320.jpeg&quot; width=&quot;862&quot; height=&quot;460&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Because design tools often provide their font sizes in &lt;code&gt;px&lt;/code&gt;, I wanted to start there. How can we minimize the time spent trying to use the theme itself? By creating a theme function that accepts a font size in &lt;code&gt;px&lt;/code&gt; and returns the &lt;code&gt;rem&lt;/code&gt; value we reduce the amount of mental hurdles needed to write these styles.&lt;/p&gt;
&lt;p&gt;Sure, this approach as is doesn&#39;t enforce a theme. What&#39;s to prevent somebody from entering any value they want? TypeScript or PropTypes is what. A type can be written for the &lt;code&gt;fontSize&lt;/code&gt; theme function to ensure only defined theme values are used. Or go a step further with an &lt;code&gt;enum&lt;/code&gt; so values can be auto-completed and seen while writing.&lt;/p&gt;
&lt;p&gt;No more converting to &lt;code&gt;rem&lt;/code&gt;. No more arbitrary shirt sizes like &lt;code&gt;xs&lt;/code&gt; and &lt;code&gt;xxxxl&lt;/code&gt;. Just a typed function that let&#39;s us work with what we have from the first step.&lt;/p&gt;
&lt;h2&gt;Spacing Values&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Developers don&#39;t know how big the &lt;code&gt;medium&lt;/code&gt; and &lt;code&gt;large&lt;/code&gt; sizes are, they just know they need something in between.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly to font sizes, spacing values often follow a shirt size pattern. While conceptually the values &lt;code&gt;sm&lt;/code&gt; and &lt;code&gt;xl&lt;/code&gt; mean different things, we don&#39;t exactly know &lt;em&gt;what&lt;/em&gt; they mean. If the design calls for a top margin of &lt;code&gt;16px&lt;/code&gt;, how can I remember every spacing size variable to know the right one to use?&lt;/p&gt;
&lt;p&gt;In short, I can&#39;t.&lt;/p&gt;
&lt;h2&gt;My Approach&lt;/h2&gt;
&lt;p&gt;Instead of remembering every spacing variable and value, I set out to remember only one; the base.&lt;/p&gt;
&lt;p&gt;Many designs work within multiplications of a single base value, such as 8. All spacing throughout the product will be relative to that one base value. So once a developer knows that, they should be able to use the theme&#39;s spacing.&lt;/p&gt;
&lt;p&gt;Since the pitfalls here are similar to those of font sizes, my approach is similar as well.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/JJxe74y4_V-320.webp 320w, https://www.danyuschick.com/assets/images/JJxe74y4_V-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/JJxe74y4_V-320.jpeg 320w, https://www.danyuschick.com/assets/images/JJxe74y4_V-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of a spacing theme function&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/JJxe74y4_V-320.jpeg&quot; width=&quot;862&quot; height=&quot;436&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Popular CSS frameworks like &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind CSS&lt;/a&gt; use a similar approach. Define a base value, then use a class like &lt;code&gt;mt-4&lt;/code&gt; to create spacing relative to that base.&lt;/p&gt;
&lt;p&gt;Also like the font sizes approach, this function is prone to exploiting and breaking theme conventions. This is why I type the &lt;code&gt;value&lt;/code&gt; options to values between &lt;code&gt;0.5&lt;/code&gt; -&lt;code&gt;10&lt;/code&gt; by increments of &lt;code&gt;0.5&lt;/code&gt;. Once a developer knows the base value of the product is 8, they&#39;ll know how to use the theme when the design calls for &lt;code&gt;16px&lt;/code&gt;, just as easily as &lt;code&gt;4px&lt;/code&gt; or &lt;code&gt;44px&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Multiple Themes &amp;amp; Variations&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In a single file, making a manual change is fine. In multiple files, making a manual change is automatically dangerous.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&#39;ve certainly been there. Maybe you have, too. There are multiple theme files, one for a light mode, another dark, and a third for a high contrast mode and a feature calls for a new font size to be added. So you add it, but in the light theme only, and forget about the others.&lt;/p&gt;
&lt;p&gt;Now, what happens when a person uses that feature in dark mode?&lt;/p&gt;
&lt;h2&gt;My Approach&lt;/h2&gt;
&lt;p&gt;This is where combining theme data becomes helpful. For the same reasons I keep all of my i18n values together, I keep my theme values together using the &lt;a href=&quot;https://github.com/styled-components/styled-theming&quot;&gt;Styled Theming&lt;/a&gt; library.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/oRHERtd3B_-320.webp 320w, https://www.danyuschick.com/assets/images/oRHERtd3B_-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/oRHERtd3B_-320.jpeg 320w, https://www.danyuschick.com/assets/images/oRHERtd3B_-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of styled theming grouping theme variations&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/oRHERtd3B_-320.jpeg&quot; width=&quot;862&quot; height=&quot;897&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;When I build my i18n files, I keep my language text strings together so that at a glance, I can see what translations are missing or, so when changes inevitably happen, I can make them all in the same place. This logic has become a life saver and with Styled Theming, the same approach can be taken when building themes.&lt;/p&gt;
&lt;p&gt;In the example above, we define the values for both &lt;code&gt;light&lt;/code&gt; and &lt;code&gt;dark&lt;/code&gt; modes in the same place, assigning their values to a theme key of &lt;code&gt;mode&lt;/code&gt;. That way when we&#39;re using the &lt;code&gt;ThemeProvider&lt;/code&gt; to wrap our app, we pass in a &lt;code&gt;mode&lt;/code&gt; and the appropriate theme will be used.&lt;/p&gt;
&lt;p&gt;This not only keeps our values in one place, it opens additional opportunities to create theme variations.&lt;/p&gt;
&lt;h3&gt;Variations&lt;/h3&gt;
&lt;p&gt;Think about a product where the color mode and font sizing or spacing can be adjusted. Something like GMail which has compact views for spacing and plenty of color options. This could potentially require creating theme files for each possible variation, but again, with Styled Theming we can combine theme variations without excessive duplication.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/rg5QSstWZ_-320.webp 320w, https://www.danyuschick.com/assets/images/rg5QSstWZ_-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/rg5QSstWZ_-320.jpeg 320w, https://www.danyuschick.com/assets/images/rg5QSstWZ_-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of theme variations&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/rg5QSstWZ_-320.jpeg&quot; width=&quot;862&quot; height=&quot;486&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Here, we can expand our other theme functions, like &lt;code&gt;space&lt;/code&gt;, to also support variations. By passing these variations into the &lt;code&gt;ThemeProvider&lt;/code&gt; we can now accomplish great product personalization without multiple files recreating theme values over and over again, thus ensuring that when changes happen, they can happen safely in one place.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;If there was a &lt;em&gt;best&lt;/em&gt; way to handle naming and theming, we would likely learn that way and carry on. After seeing common pitfalls project after project, I wanted to take a step back and work on an approach that met my goals for a theme --- easy to step into and easy to read and write with versatile naming that carries through multiple themes and variations.&lt;/p&gt;
&lt;p&gt;This may not be the best approach for you or your product, and that&#39;s okay. We create themes to support personalization, and how we choose to build them is no different.&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/styled-components/styled-theming&quot;&gt;Styled Theming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://styled-components.com/&quot;&gt;Styled Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 21 Jan 2021 02:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/avoiding-common-theming-pitfalls-with-react-and-styled-components/</guid>
      </item>
      
      <item>
        <title>CSS Logical Properties Are the Future of the Web &amp; I18N</title>
        <link>https://www.danyuschick.com/articles/css-logical-properties-are-the-future-of-the-web-and-i18n/</link>
        <description>&lt;p&gt;I can&#39;t remember how many years ago it was, but during my first interview for a Frontend position, I was asked to sketch out the CSS box model. I outlined the margins, borders, and padding and even denoted each side with its physical description–left, right, top and bottom.&lt;/p&gt;
&lt;p&gt;I had committed that model to memory, and have never really reconsidered it since. It never occurred to me that something so fundamental could change. Yet here I am, writing an article to tell you that it, in fact, has.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter Logical Properties&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Properties like top and left are physical in nature. They describe the specific side of an element, and stay attached to that physical location no matter how that element may render. Whereas, logical properties describe locations of an element based on the content flow, like start and end.&lt;/p&gt;
&lt;h2&gt;Why is this important?&lt;/h2&gt;
&lt;p&gt;If we&#39;re going to adjust our fundamental approach to writing and visualizing CSS, it&#39;s fair to ask why.&lt;/p&gt;
&lt;p&gt;The web has firmly shifted into an expectation of responsive, user-friendly sites and products. That fluidity has allowed the platform to scale at tremendous rates, and has fully altered entire markets and industries.&lt;/p&gt;
&lt;p&gt;But in the pursuit of supporting more and more devices, what happens if one of those devices isn&#39;t in English? Or French? Or any other language that flows from top to bottom, left to right?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Building inclusive products doesn&#39;t mean supporting devices, but supporting the people using them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking at Hebrew specifically, a language written and read from right to left, there&#39;re plenty of styling challenges in handling this minor variation. Instances of &lt;code&gt;text-align: left&lt;/code&gt; would need to be conditionally updated to &lt;code&gt;text-align: right&lt;/code&gt; or an entirely separate set of styles is loaded, essentially creating a second unique version of the site or product.&lt;/p&gt;
&lt;p&gt;What happens then with Japanese, where text flows from top to bottom, and content from right to left? Or Mongolian where the text flows the same, but the content is flipped to flow left to right?&lt;/p&gt;
&lt;p&gt;Previously, elements were positioned with CSS physically into place where content would start or end with properties like &lt;code&gt;bottom&lt;/code&gt;, &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, and &lt;code&gt;top&lt;/code&gt;. Then depending on the specific use case or situation, like Hebrew, reposition everything again.&lt;/p&gt;
&lt;p&gt;This is where CSS Logical Properties shine. When writing &lt;code&gt;text-align: left&lt;/code&gt;, it&#39;s likely because the text should be positioned where the content is expected to &lt;em&gt;start&lt;/em&gt;. Only, as mentioned, content doesn&#39;t always start at the left. So what would be ideal is something like &lt;code&gt;text-align: start&lt;/code&gt; to ensure our content is aligned with its expected starting point.&lt;/p&gt;
&lt;p&gt;And that&#39;s exactly what CSS Logical Properties do.&lt;/p&gt;
&lt;h2&gt;Logical Approach&lt;/h2&gt;
&lt;p&gt;We&#39;re likely familiar with how the web is broken into two main axes– X and Y. While this hasn&#39;t changed, the naming conventions have.&lt;/p&gt;
&lt;p&gt;The horizontal, X-axis becomes the &lt;strong&gt;inline&lt;/strong&gt;-axis, while the vertical, Y-axis becomes the &lt;strong&gt;block&lt;/strong&gt;-axis. But before breaking down individual property comparisons, let&#39;s dig a little deeper into understanding the &lt;strong&gt;inline&lt;/strong&gt; and &lt;strong&gt;block&lt;/strong&gt; axes and how they relate to this shift to logical properties.&lt;/p&gt;
&lt;h3&gt;Logical Axes&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;inline&lt;/strong&gt; and &lt;strong&gt;block&lt;/strong&gt; axes determine the content and document flow of a page. Each axis, though, and their corresponding flow, can be set using two CSS properties - &lt;code&gt;direction&lt;/code&gt; and &lt;code&gt;writing-mode&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Inline Axis (direction)&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;direction&lt;/code&gt; property affects the &lt;strong&gt;inline&lt;/strong&gt; axis. This property can be used to set the flow (or direction) of text, columns, and horizontal overflow from left to right or, like in the case of Arabic or Hebrew, right to left.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; rtl | ltr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Block Axis (writing-mode)&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;writing-mode&lt;/code&gt; property affects the &lt;strong&gt;block&lt;/strong&gt; axis. This property can be used to set the flow of block-level containers either horizontally or, like in the case of Japanese, vertically.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token property&quot;&gt;writing-mode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; horizontal-tb | vertical-lr | vertical-rl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The three keyword values shown here represent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;horizontal-tb: Horizontal, top to bottom&lt;/li&gt;
&lt;li&gt;vertical-lr: Vertical, left to right&lt;/li&gt;
&lt;li&gt;vertical-rl: Vertical, right to left&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;What happens to the axes when direction or writing-mode are set?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Logical properties will replace styles like &lt;code&gt;text-align: left&lt;/code&gt; with &lt;code&gt;text-align: start&lt;/code&gt;. This is because, when defining the &lt;code&gt;direction&lt;/code&gt; property, the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; points of the &lt;strong&gt;inline&lt;/strong&gt; axis are set.&lt;/p&gt;
&lt;p&gt;In Latin languages, setting &lt;code&gt;direction: ltr&lt;/code&gt; will define the &lt;code&gt;start&lt;/code&gt; of the &lt;strong&gt;inline&lt;/strong&gt; axis to the left. Whereas, in a language like Hebrew, &lt;code&gt;direction: rtl&lt;/code&gt; will define the &lt;code&gt;start&lt;/code&gt; of the &lt;strong&gt;inline axis&lt;/strong&gt; to the right.&lt;/p&gt;
&lt;p&gt;Aligning content with &lt;code&gt;text-align: start&lt;/code&gt; will align the text to the start of the &lt;strong&gt;inline axis&lt;/strong&gt;, relative to its &lt;code&gt;direction&lt;/code&gt; value.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/jtK3eG5o0E-320.webp 320w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;How the direction property affects the inline axis flow&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/jtK3eG5o0E-320.jpeg&quot; width=&quot;320&quot; height=&quot;320&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;block&lt;/strong&gt; axis is where changes to the page can become dramatic. It&#39;s one thing to define the &lt;code&gt;direction&lt;/code&gt; of the content flow, but another to define the flow of block content and containers with &lt;code&gt;writing-mode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For this, maybe it&#39;ll help to show the graphic first.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/VWAGkVJu5r-320.webp 320w, https://www.danyuschick.com/assets/images/VWAGkVJu5r-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/VWAGkVJu5r-320.jpeg 320w, https://www.danyuschick.com/assets/images/VWAGkVJu5r-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;How the writing-mode property affects the block and inline axes&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/VWAGkVJu5r-320.jpeg&quot; width=&quot;862&quot; height=&quot;387&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Notice in the graphic, when rotating the &lt;strong&gt;block&lt;/strong&gt; axis into a vertical position with &lt;code&gt;writing-mode&lt;/code&gt;, the &lt;strong&gt;inline&lt;/strong&gt; axis rotates with it. This is what Flexbox has been teaching us all these years when changing its direction between &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;. When changing the &lt;code&gt;writing-mode&lt;/code&gt; from horizontal to vertical, both axes rotate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Little did I know, Flexbox and Grid had been preparing us for this logical approach for years.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where logical properties and values come into play.&lt;/p&gt;
&lt;p&gt;If an image has a &lt;code&gt;margin-left&lt;/code&gt; value creating distance between it and some text while the &lt;code&gt;writing-mode&lt;/code&gt; is in a horizontal state, what happens to that margin when the &lt;code&gt;writing-mode&lt;/code&gt; shifts to vertical? The vertical flow will place the text above the image, while the image&#39;s margin is still on its left.&lt;/p&gt;
&lt;p&gt;The image doesn&#39;t need a margin on its left side, but a margin at the &lt;code&gt;start&lt;/code&gt; of its &lt;strong&gt;inline&lt;/strong&gt; axis.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/logical-css-is-the-future/codepen-demo-1.gif&quot; alt=&quot;View demo on CodePen: https://codepen.io/Yuschick/pen/qBaRWJY&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Logical properties are aligned relative to the &lt;code&gt;start&lt;/code&gt; and `end points of their respective axis, regardless of how those axes flow.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/X3A83DSMH1-320.webp 320w, https://www.danyuschick.com/assets/images/X3A83DSMH1-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/X3A83DSMH1-320.jpeg 320w, https://www.danyuschick.com/assets/images/X3A83DSMH1-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Comparing the physical and logical CSS box models&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/X3A83DSMH1-320.jpeg&quot; width=&quot;862&quot; height=&quot;485&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;CSS Logical Properties require a shift in how elements are seen, both visually and mentally. An element will no longer have a &lt;code&gt;width&lt;/code&gt; value, but an &lt;code&gt;inline-size&lt;/code&gt; value, defining its size along the inline axis. No longer a &lt;code&gt;height&lt;/code&gt; value, but &lt;code&gt;block-size&lt;/code&gt;. And text will no longer be aligned with physical values like &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; but with logical values like &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Physical → Logical Examples&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;border/margin/padding-left&lt;/code&gt; → &lt;code&gt;border/margin/padding-inline-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border/margin/padding-right&lt;/code&gt; → &lt;code&gt;border/margin/padding-inline-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border/margin/padding-top&lt;/code&gt; → &lt;code&gt;border/margin/padding-block-start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;border/margin/padding-bottom&lt;/code&gt; → &lt;code&gt;border/margin/padding-block-end&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(min/max-)height&lt;/code&gt; → &lt;code&gt;(min/max-)block-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(min/max-)width&lt;/code&gt; → &lt;code&gt;(min/max-)inline-size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top/bottom&lt;/code&gt; → &lt;code&gt;inset-block&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left/right&lt;/code&gt; → &lt;code&gt;inset-inline&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting Started with Logical Properties&lt;/h2&gt;
&lt;p&gt;After coming across logical properties, I was excited to use them in a practical setting–something more than exploratory tinkering in CodePen. So, despite having no intention on translating my personal website to any other language, I set out to refactor it with logical properties.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/logical-css-is-the-future/site-demo-1.gif&quot; alt=&quot;CSS Logical properties in full effect&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Support &amp;amp; Scope&lt;/h3&gt;
&lt;p&gt;As with everything, browser support must be considered before implementing any change, much less something that overhauls just about everything.&lt;/p&gt;
&lt;p&gt;While some logical properties have decent support like &lt;code&gt;inline-&lt;/code&gt; and &lt;code&gt;block-size&lt;/code&gt;, each property seems to be supported in different environments. So I went the route of writing a bunch of &lt;code&gt;@supports&lt;/code&gt; queries.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/logical-css-is-the-future/code-snippet-1.png&quot; alt=&quot;Using CSS logical properties with @supports queries&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/GK3BRtpUCU-320.webp 320w, https://www.danyuschick.com/assets/images/GK3BRtpUCU-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/GK3BRtpUCU-320.jpeg 320w, https://www.danyuschick.com/assets/images/GK3BRtpUCU-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Using CSS logical properties with @supports queries&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/GK3BRtpUCU-320.jpeg&quot; width=&quot;862&quot; height=&quot;927&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;All the queries add to the amount of code, for sure. However, for my personal project like this, I don&#39;t mind the trade off.&lt;/p&gt;
&lt;h2&gt;Gotchas&lt;/h2&gt;
&lt;h3&gt;Property Support&lt;/h3&gt;
&lt;p&gt;Not every property has a logical equivalent or support yet. For example, &lt;code&gt;clip-path&lt;/code&gt; and linear gradient values are not able to be defined with logical values. The former can be seen in the image of my personal site&#39;s header.&lt;/p&gt;
&lt;h3&gt;Conflicting Approaches&lt;/h3&gt;
&lt;p&gt;Additionally, using logical properties doesn&#39;t overwrite physical ones. Let&#39;s look at an element with padding and an absolute position.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/lvgrEZJMaG-320.webp 320w, https://www.danyuschick.com/assets/images/lvgrEZJMaG-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/lvgrEZJMaG-320.jpeg 320w, https://www.danyuschick.com/assets/images/lvgrEZJMaG-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;CSS Logical properties gotchas&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/lvgrEZJMaG-320.jpeg&quot; width=&quot;862&quot; height=&quot;557&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;What I had originally expected was for the &lt;code&gt;margin-block/inline&lt;/code&gt; and &lt;code&gt;border-block-start&lt;/code&gt; values to overwrite their physical equivalents of &lt;code&gt;margin&lt;/code&gt; and &lt;code&gt;border-top&lt;/code&gt;. However, they did not.&lt;/p&gt;
&lt;p&gt;In this case, the element rendered styles for &lt;code&gt;margin&lt;/code&gt;, &lt;code&gt;border-top&lt;/code&gt;, &lt;code&gt;border-block-start&lt;/code&gt;, and &lt;code&gt;margin-block/inline&lt;/code&gt;. This obviously created alignment issues in the UI as the &lt;code&gt;writing-mode&lt;/code&gt; changed and styles clashed.&lt;/p&gt;
&lt;p&gt;To avoid this, I, again, turned to supports queries, but this time with the &lt;code&gt;not&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-4X2ntW1Cw-320.webp 320w, https://www.danyuschick.com/assets/images/-4X2ntW1Cw-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-4X2ntW1Cw-320.jpeg 320w, https://www.danyuschick.com/assets/images/-4X2ntW1Cw-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Using @supports queries with the not keyword&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/-4X2ntW1Cw-320.jpeg&quot; width=&quot;862&quot; height=&quot;656&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Is this getting to be a lot of CSS to write? Sure. And again, probably not an ideal approach at this time for professional products with multiple developers having to read this. However, for the use case of my own site, and to experiment with the features, I&#39;m comfortable with it.&lt;/p&gt;
&lt;p&gt;By using &lt;code&gt;supports&lt;/code&gt; and &lt;code&gt;supports not&lt;/code&gt; physical and logical properties can be rendered without conflicting with each other.&lt;/p&gt;
&lt;h3&gt;Shorthand&lt;/h3&gt;
&lt;p&gt;When writing my styles, I tend to include frequent shorthanded properties, especially &lt;code&gt;margin&lt;/code&gt; and `padding.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/0lhtU2wb2i-320.webp 320w, https://www.danyuschick.com/assets/images/0lhtU2wb2i-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/0lhtU2wb2i-320.jpeg 320w, https://www.danyuschick.com/assets/images/0lhtU2wb2i-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;CSS example of shorthand padding values&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/0lhtU2wb2i-320.jpeg&quot; width=&quot;862&quot; height=&quot;311&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;In this example, this style would apply a padding to all four sides of the element. But how does CSS know if those are physical or logical values? It doesn&#39;t. As of now, it would render with physical properties.&lt;/p&gt;
&lt;p&gt;The approach with logical properties would be to specify a value for both ends of both axes.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-HNr0ftleL-320.webp 320w, https://www.danyuschick.com/assets/images/-HNr0ftleL-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/-HNr0ftleL-320.jpeg 320w, https://www.danyuschick.com/assets/images/-HNr0ftleL-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;CSS padding example with logical properties&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/-HNr0ftleL-320.jpeg&quot; width=&quot;862&quot; height=&quot;385&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Now, just because the traditional `padding shorthand doesn&#39;t work with logical properties yet, doesn&#39;t mean there aren&#39;t some logical shorthand alternatives already.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/jWBr6XrUqe-320.webp 320w, https://www.danyuschick.com/assets/images/jWBr6XrUqe-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/jWBr6XrUqe-320.jpeg 320w, https://www.danyuschick.com/assets/images/jWBr6XrUqe-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;CSS logical properties with shorthand values&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/jWBr6XrUqe-320.jpeg&quot; width=&quot;862&quot; height=&quot;336&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Using the shorthand properties of &lt;code&gt;padding-block&lt;/code&gt; and &lt;code&gt;padding-inline&lt;/code&gt;, values for the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; positions for each can be defined in a single property for each axis.&lt;/p&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;As the web evolves and the expectations for inclusive products become more broad, the shift from physical layouts to logical ones will be a requirement.&lt;/p&gt;
&lt;p&gt;No longer will the spacing on the &lt;em&gt;left&lt;/em&gt; side of an image matter, but the spacing preceding it along its axis will, because left is not always the same thing to everybody.&lt;/p&gt;
&lt;p&gt;I never thought such a fundamental piece of web development could change, but I was wrong, and I&#39;m so excited that I was.&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DEmdg4aj8O6U%26ab_channel%3DCSSMastersIsrael&quot;&gt;Elad Shechter Video (Youtube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fwebdesign.tutsplus.com%2Ftutorials%2Fhow-to-use-css-logical-properties--cms-33024&quot;&gt;Anna Monus - How to use CSS Logical Properties to Control Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fcss-tricks.com%2Flate-to-logical%2F&quot;&gt;Adam Argyle - Late to Logical (CSS Tricks)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fdirection&quot;&gt;MDN: direction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/r/?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FCSS%2Fwriting-mode&quot;&gt;MDN: writing-mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 14 Dec 2020 02:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/css-logical-properties-are-the-future-of-the-web-and-i18n/</guid>
      </item>
      
      <item>
        <title>Easy Peasy Stores with Public and Private Actions</title>
        <link>https://www.danyuschick.com/articles/easy-peasy-stores-with-public-and-private-actions/</link>
        <description>&lt;p&gt;Since the end of 2019, I have been using &lt;a href=&quot;https://easy-peasy.now.sh/&quot;&gt;Easy Peasy&lt;/a&gt; to manage the state of my applications both professionally and personally. The library has a familiar API and logic with a lightweight feel and good flexibility. If you&#39;re using or have used Redux and aren&#39;t fully sold on it, take a look into Easy-Peasy. It may be worth it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Easy Peasy is an abstraction of Redux, providing a re-imagined API that focuses on developer experience.&amp;quot; --- &lt;a href=&quot;https://easy-peasy.now.sh/&quot;&gt;Easy Peasy&#39;s official website&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Each time I&#39;ve set up an Easy Peasy store, I&#39;ve experimented more with its implementation. I&#39;ve asked myself more questions about not only what the library can do but what can be done with it. During my latest project, I had asked myself, &amp;quot;What if I wanted my app to have access to only a specific subset of actions? Can Easy Peasy create private and public actions for its stores?&amp;quot;&lt;/p&gt;
&lt;p&gt;I looked through the docs but didn&#39;t find an answer to this question. I&#39;d hoped for something like JavaScript classes where I could preface any action or state value with &lt;code&gt;private&lt;/code&gt;. But while that wasn&#39;t the case, that doesn&#39;t mean that wasn&#39;t the answer.&lt;/p&gt;
&lt;p&gt;I mentioned that with each project, I explored more of not only what Easy Peasy could do but what I could do with it --- and this will be an example of the latter.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: This article will assume a base understanding of creating a store and Hooks using Easy Peasy. Some code samples will roughly include these concepts but will not explain them or show them in full. Please visit the&lt;/em&gt; &lt;a href=&quot;https://easy-peasy.now.sh/docs/introduction/&quot;&gt;&lt;em&gt;Easy Peasy docs&lt;/em&gt;&lt;/a&gt; &lt;em&gt;for better information on getting started.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;The Project&lt;/h2&gt;
&lt;p&gt;Recently, I&#39;ve been working on creating a centralized store that will serve both a React web app and a React Native app. The store will contain all state values, data requests, resolver logic, and TypeScript types. That way, both products are consistent in pulling data from the same place, the same way, with the same logic, all with a singular point for updating and maintenance. The store is installed like any other npm package and exposes a provider to both apps and both teams.&lt;/p&gt;
&lt;p&gt;And that is where the idea for public and private actions came to mind.&lt;/p&gt;
&lt;p&gt;This store will be used across products and teams. Right now, it&#39;s easy to work with the other developers, but as the teams grow, ultimately, this may not be the case. The patterns and logic discussed across the team now may not always be clearly communicated later, whether in person or through documentation, and then those patterns may break down.&lt;/p&gt;
&lt;p&gt;A way to alleviate that now, and later at scale, is to only expose the actions the apps should be using.&lt;/p&gt;
&lt;h2&gt;Exposing Public Actions&lt;/h2&gt;
&lt;p&gt;As mentioned, I didn&#39;t see a way in the docs for Easy Peasy to support this functionality out of the box, so I had to get a little creative to achieve it.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at an example model that we&#39;ll use throughout:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/RNsUs8YF7K-320.webp 320w, https://www.danyuschick.com/assets/images/RNsUs8YF7K-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/RNsUs8YF7K-320.jpeg 320w, https://www.danyuschick.com/assets/images/RNsUs8YF7K-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Example code of creating a set of public actions inside of an Easy Peasy state management store&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/RNsUs8YF7K-320.jpeg&quot; width=&quot;862&quot; height=&quot;694&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Example store model with Easy Peasy&lt;/p&gt;
&lt;p&gt;In the (abbreviated) code above, we have a store for &lt;code&gt;Projects&lt;/code&gt;. It contains all of its own state, actions, and thunks. Using Easy Peasy, we can create Hooks to access this store in our UI:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/XMQzVtS8no-320.webp 320w, https://www.danyuschick.com/assets/images/XMQzVtS8no-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/XMQzVtS8no-320.jpeg 320w, https://www.danyuschick.com/assets/images/XMQzVtS8no-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Creating a set of React hooks to connect to the Easy Peasy store state and store actions&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/XMQzVtS8no-320.jpeg&quot; width=&quot;862&quot; height=&quot;657&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Example of using Easy Peasy Hooks in the UI&lt;/p&gt;
&lt;p&gt;As seen in the code above, the &lt;code&gt;useStoreState&lt;/code&gt; and &lt;code&gt;useStoreActions&lt;/code&gt; Hooks expose the entire &lt;code&gt;Project&lt;/code&gt; store. However, we want to restrict that.&lt;/p&gt;
&lt;p&gt;Specifically, the pattern here is to have &lt;code&gt;thunks&lt;/code&gt; maintain &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;loading&lt;/code&gt; states manually. It will also take its response and call &lt;code&gt;actions.setProjects()&lt;/code&gt; on its own. Because of this pattern, we don&#39;t want the UI to have access to &lt;code&gt;setError&lt;/code&gt;, &lt;code&gt;setLoading&lt;/code&gt;, or &lt;code&gt;setProjects&lt;/code&gt; since all of those actions are handled internally within the store. We want the UI to only have access to &lt;code&gt;setActiveProjectSlug&lt;/code&gt; and &lt;code&gt;fetchProjects&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Creating Our Custom Hooks&lt;/h2&gt;
&lt;p&gt;We have identified which actions should be privateand which should be exposed to the UI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Private: &lt;code&gt;setError&lt;/code&gt;, &lt;code&gt;setLoading&lt;/code&gt;, &lt;code&gt;setProjects&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Public: &lt;code&gt;setActiveProjectSlug&lt;/code&gt;, &lt;code&gt;fetchProjects&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knowing that, let&#39;s create our own custom Hooks in the centralized store to filter out anything considered private:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/vHez4cXhhB-320.webp 320w, https://www.danyuschick.com/assets/images/vHez4cXhhB-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/vHez4cXhhB-320.jpeg 320w, https://www.danyuschick.com/assets/images/vHez4cXhhB-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of creating a custom React Hook to expose only public values from Easy Peasy&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/vHez4cXhhB-320.jpeg&quot; width=&quot;862&quot; height=&quot;297&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Creating a custom Hook to expose public actions from Easy Peasy store&lt;/p&gt;
&lt;p&gt;Here, we&#39;ve created a custom Hook (&lt;code&gt;useProjectActions&lt;/code&gt;) that calls the base Hook (&lt;code&gt;useStoreActions&lt;/code&gt;). Since the base Hook returns everything from the store, we destructure out only the actions we want (&lt;code&gt;fetchProjects&lt;/code&gt; and &lt;code&gt;setActiveProjectSlug&lt;/code&gt;) and return them, leaving behind anything else we consider to be private.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The same thing can be done for public and private state values as well.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;TypeScript&lt;/h2&gt;
&lt;p&gt;Another reason I like Easy Peasy is its integration with TypeScript. Since the current project is done in TypeScript, let&#39;s see an example of how to type out our new custom Hooks.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/5hPm529SDv-320.webp 320w, https://www.danyuschick.com/assets/images/5hPm529SDv-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/5hPm529SDv-320.jpeg 320w, https://www.danyuschick.com/assets/images/5hPm529SDv-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of creating the custom React Hooks using TypeScript&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/5hPm529SDv-320.jpeg&quot; width=&quot;862&quot; height=&quot;370&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Creating custom Hooks with Easy Peasy in TypeScript&lt;/p&gt;
&lt;p&gt;When creating the store in TypeScript, actions and thunks use the types of &lt;code&gt;Action&lt;/code&gt; and &lt;code&gt;Thunk&lt;/code&gt; exported from Easy Peasy. But when consuming these actions through the &lt;code&gt;useStoreActions&lt;/code&gt; Hook, they are now typed as &lt;code&gt;ActionCreator&lt;/code&gt; and &lt;code&gt;ThunkCreator&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, our new custom &lt;code&gt;useProjectActions&lt;/code&gt; is typed and exposes only the actions we want the UI to consume.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/uSzKCvjjby-320.webp 320w, https://www.danyuschick.com/assets/images/uSzKCvjjby-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/uSzKCvjjby-320.jpeg 320w, https://www.danyuschick.com/assets/images/uSzKCvjjby-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Showcasing the TypeScript method autocompletion with the custom React Hooks&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/uSzKCvjjby-320.jpeg&quot; width=&quot;862&quot; height=&quot;143&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;TypeScript suggestion on the newly typed custom Hooks&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Stores can quickly become large, with multiple models all containing their own actions, thunks, and state. When a store like that is being consumed across multiple apps with different teams and developers, it can become confusing to use in the UI with all of that data being exposed. Without clear communication and documentation (and even still), it is a matter of time until something is called or used that shouldn&#39;t be, the UI falters, and the store patterns break.&lt;/p&gt;
&lt;p&gt;By taking the extra step of creating custom Hooks to filter out anything considered private, that confusion in the UI can be cleared up and the patterns in the store can be maintained.&lt;/p&gt;
&lt;p&gt;There&#39;s a difference between what a library can do and what can be done with it. Easy Peasy is a terrific library that does a lot of things well, but the things that can be done &lt;em&gt;with&lt;/em&gt; it expand that functionality even further.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Oct 2020 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/easy-peasy-stores-with-public-and-private-actions/</guid>
      </item>
      
      <item>
        <title>Improve Web App Accessibility with React-Focus-On</title>
        <link>https://www.danyuschick.com/articles/improve-accessibility-with-react-focus-on/</link>
        <description>&lt;p&gt;Many moons ago, when I started working as a front-end developer, I didn&#39;t know much about web accessibility. That changed when I worked on a team at a large insurance company and was put in charge of making the product accessible. You see, in the US, something like the inability to file an insurance claim on a website due to inaccessibility could lead to lawsuits. Super duper expensive lawsuits.&lt;/p&gt;
&lt;p&gt;I didn&#39;t want to be responsible for that.&lt;/p&gt;
&lt;p&gt;As a result, I learned a lot in a short period of time about accessibility. Since then, it has become an area of focus in which I take a lot of pride as a developer.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Working toward accessibility goals can be tough and, frankly, a little extra time consuming. So it is easy for this fundamental element of a product to be overlooked. But you know what else takes extra time and effort? Testing, type checking-- yet these practices have become a standard. So why hasn&#39;t accessibility become just as recognized throughout the field?&lt;/p&gt;
&lt;p&gt;Tooling.&lt;/p&gt;
&lt;p&gt;There hasn&#39;t been a wide selection of tooling that eased some of the necessary requirements of accessibility compliance. Let&#39;s consider a &lt;code&gt;Modal&lt;/code&gt; component. The &lt;code&gt;Modal&lt;/code&gt; would need to keep the user&#39;s keyboard focus within itself while auto-focusing the first possible element. Closing it would need to be tied to the &lt;code&gt;escape&lt;/code&gt; key, and once closed, the user&#39;s focus would need to be returned to the element that triggered the &lt;code&gt;Modal&lt;/code&gt; in the first place.&lt;/p&gt;
&lt;p&gt;That&#39;s a lot to manage.&lt;/p&gt;
&lt;p&gt;The first library I used to help with these challenges was &lt;a href=&quot;https://allyjs.io/&quot;&gt;Ally.JS&lt;/a&gt;. It provided a lot of different methods for handling these specific use cases. At first, it seemed revolutionary as I enhanced a bunch of my projects using it. But as the story goes with front-end development, after some time, what was once revolutionary had become legacy. The library was not regularly maintained and therefor, fell behind the times.&lt;/p&gt;
&lt;p&gt;I recently started on a new product in the Education Tech field. In this area, specifically, accessibility is not just a nice feature but an absolute requirement.&lt;/p&gt;
&lt;p&gt;I knew two things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Providing education software to the public sector without accommodating special needs schools, classes, and students would not only be a failure of the development team, but a bad business practice in alienating an entire demographic of the target audience.&lt;/li&gt;
&lt;li&gt;Ally.JS could no longer handle the requirements within the coding environment&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So that led me to Google, which led me to the library I am excited to (&lt;em&gt;finally! geesh!&lt;/em&gt;) tell you all about.&lt;/p&gt;
&lt;h2&gt;React-Focus-On&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/theKashey/react-focus-on&quot;&gt;https://github.com/theKashey/react-focus-on&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React-Focus-On is a web accessibility library specifically geared toward the React environment with TypeScript support. It touts itself as...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The final solution for WAI ARIA compatible Modal Dialogs or any full-screen tasks&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bold.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So let&#39;s first look at what we&#39;ll be building today, then we&#39;ll break it down to see just how easy is React-Focus-On after all.&lt;/p&gt;
&lt;p&gt;The example used in this article will be available on GitHub. &lt;a href=&quot;https://github.com/yuschick/react-focus-on-demo&quot;&gt;https://github.com/yuschick/react-focus-on-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/react-focus-on/demo-project-1.gif&quot; alt=&quot;Accessible React modal component&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Yep, a standard-looking modal, &lt;em&gt;but&lt;/em&gt; there are several things happening that separate it from non-accessible modals.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When the modal opens, notice that the first focusable element, &lt;code&gt;Blue&lt;/code&gt;, is focused already.&lt;/li&gt;
&lt;li&gt;When tabbing through the elements, notice that after reaching the submit button, the focus then appears on the close icon. This is called focus trapping, and it keeps the focus of the keyboard within the modal.&lt;/li&gt;
&lt;li&gt;Behind the scenes, in the code itself, the markup outside of the modal is set to &lt;code&gt;aria-hidden=&amp;quot;true&amp;quot;&lt;/code&gt; which prevents it from being seen by screen readers while the modal is open. The &lt;code&gt;body&lt;/code&gt; itself is also scroll locked, keeping the page steady behind the modal.&lt;/li&gt;
&lt;li&gt;When the modal closes, the button that triggered it initially is given focus again, returning the user back to their previous location.&lt;/li&gt;
&lt;li&gt;Closing the modal also removes the &lt;code&gt;aria-hidden&lt;/code&gt; attribute from the rest of the document.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That can be a lot of functionality to manage without a library. Hell, it was a lot to manage even with &lt;code&gt;AllyJS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So how can &lt;code&gt;React-Focus-On&lt;/code&gt; be used to achieve all of this? Like this...&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/ixMow-xIUm-320.webp 320w, https://www.danyuschick.com/assets/images/ixMow-xIUm-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/ixMow-xIUm-320.jpeg 320w, https://www.danyuschick.com/assets/images/ixMow-xIUm-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Snapshot of React-Focus-On code&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/ixMow-xIUm-320.jpeg&quot; width=&quot;862&quot; height=&quot;444&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The snipper above is a pretty bare example, but by wrapping our &lt;code&gt;Modal&lt;/code&gt; in a &lt;code&gt;FocusOn&lt;/code&gt; component, all of the previous accessibility functionality is covered by default and without any painful setup or configuration.&lt;/p&gt;
&lt;p&gt;In my opinion, making accessible modals and modal-like components has never been so convenient. But just because React-Focus-On does a lot by default, doesn&#39;t mean it doesn&#39;t have a few options up its sleeve.&lt;/p&gt;
&lt;h2&gt;Event Handlers&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;FocusOn&lt;/code&gt; component handles a lot already, but it can be expanded to make a few other features more convenient to implement, like closing on &lt;code&gt;esc&lt;/code&gt; and closing when the user clicks outside of the modal.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/FEiinmJU2B-320.webp 320w, https://www.danyuschick.com/assets/images/FEiinmJU2B-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/FEiinmJU2B-320.jpeg 320w, https://www.danyuschick.com/assets/images/FEiinmJU2B-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;An example of using React-Focus-On event props&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/FEiinmJU2B-320.jpeg&quot; width=&quot;862&quot; height=&quot;403&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;In this snippet, the &lt;code&gt;close&lt;/code&gt; prop has been assigned to the&lt;code&gt;FocusOn&lt;/code&gt; events &lt;code&gt;onClickOutside&lt;/code&gt; and &lt;code&gt;onEscapeKey&lt;/code&gt;. These two options provide common functionality but without the need to write and manage event handlers yourself.&lt;/p&gt;
&lt;h2&gt;Shards&lt;/h2&gt;
&lt;p&gt;Once in a while, there&#39;s a situation where an element outside of a focus-trapped modal should be included in the tabbable range or not hidden from interactions. React-Focus-On accepts a &lt;code&gt;shards&lt;/code&gt; property which is an array of element references.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/fM1802bH0H-320.webp 320w, https://www.danyuschick.com/assets/images/fM1802bH0H-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/fM1802bH0H-320.jpeg 320w, https://www.danyuschick.com/assets/images/fM1802bH0H-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;A code example of passing a shards array into FocusOn&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/fM1802bH0H-320.jpeg&quot; width=&quot;862&quot; height=&quot;444&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;While this modal example isn&#39;t a good use case for the &lt;code&gt;shards&lt;/code&gt; prop, the option has been helpful when building custom dropdown menus.&lt;/p&gt;
&lt;p&gt;In the example below, the label which toggles the menu is outside of the modal-like menu itself. However, the focus range should still include it. By passing the label as a &lt;code&gt;shard&lt;/code&gt;, it&#39;s included in the focus range and accessible as another option to toggle the menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/react-focus-on/demo-project-2.gif&quot; alt=&quot;An example of using shards for a drop down menu&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Animation&lt;/h2&gt;
&lt;p&gt;While not a feature of React-Focus-On, feel free to wrap it in with &lt;code&gt;CSSTransition&lt;/code&gt; from &lt;code&gt;react-transition-group&lt;/code&gt; to combine accessibility with subtle a touch of animation.&lt;/p&gt;
&lt;p&gt;If adding animation, be sure to check for &lt;code&gt;prefers-reduced-motion&lt;/code&gt; to simplify or disable the animation for those users.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;prefers-reduced-motion&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  // simplify or disable the animation&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/react-focus-on/demo-project-1.gif&quot; alt=&quot;Animated modal using React Transition Group and React-Focus-On&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Accessibility continues to be an oft-forgotten element of front-end development. There&#39;s a lot of reasons for this, but a major one has been the lack of convenient and powerful tooling. Well, after finding and using React-Focus-On, I feel there&#39;s no longer any excuse not have accessibility be a standard part of a workflow.&lt;/p&gt;
&lt;p&gt;We write tests and type check--two standard pieces in web development. We must hold accessibility to the same standard and finally, we have a library that gives us no reason not to.&lt;/p&gt;
&lt;h3&gt;Resources:&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/theKashey/react-focus-on&quot;&gt;React Focus On&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/yuschick/react-focus-on-demo&quot;&gt;Article Demo Repo&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Oct 2020 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/improve-accessibility-with-react-focus-on/</guid>
      </item>
      
      <item>
        <title>Netlify Deploy Treating Warnings as Errors</title>
        <link>https://www.danyuschick.com/articles/netlify-deploy-treating-warnings-as-errors/</link>
        <description>&lt;p&gt;If you&#39;re like me, you were minding your own business and deploying your latest feature to staging. And if you&#39;re even more like me, you&#39;re not in the habit or monitoring every single deploy but your pipeline just works.&lt;/p&gt;
&lt;p&gt;Until it doesn&#39;t.&lt;/p&gt;
&lt;p&gt;This morning&#39;s deploy came to a grinding halt with the following error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Treating warnings as errors because process.env.CI = true.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/0*jtu0mBdGPhI4wRxU.gif&quot; alt=&quot;Brooklyn 99 --- Oh, cool&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Luckily, for as daunting as the error may seem, there&#39;s a pretty straight forward fix to it.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;process.env.CI &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s set that to &lt;code&gt;false&lt;/code&gt; and carry on like the wayward children we are.&lt;/p&gt;
&lt;h2&gt;How to Fix&lt;/h2&gt;
&lt;p&gt;There are two ways this error may be fixed and it depends on your build setup.&lt;/p&gt;
&lt;h3&gt;Netlify.toml&lt;/h3&gt;
&lt;p&gt;If the build command for your project is handled in the &lt;code&gt;.toml&lt;/code&gt; file, then the fix can be made there as well by manually setting &lt;code&gt;CI&lt;/code&gt; to false inside of our build command.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note, that the &lt;code&gt;.toml&lt;/code&gt; file takes precedence over the build settings stored in Netlify.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-yml&quot;&gt;&lt;code class=&quot;language-yml&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;build&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;\&lt;br /&gt; command = &quot;&lt;span class=&quot;token important&quot;&gt;**CI=false&lt;/span&gt; &lt;span class=&quot;token important&quot;&gt;&amp;amp;&amp;amp;**&lt;/span&gt; yarn build&quot;\&lt;br /&gt; publish = &quot;build&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Netlify Build Settings&lt;/h3&gt;
&lt;p&gt;If there is not a &lt;code&gt;netlify.toml&lt;/code&gt; file in the project, the build settings can be handled directly in Netlify. By navigating to &lt;strong&gt;Settings&lt;/strong&gt; --- &lt;strong&gt;Build &amp;amp; Deploy&lt;/strong&gt; --- &lt;strong&gt;Continuous Deployment --- Build Settings&lt;/strong&gt;, you can update the build command to set &lt;code&gt;CI=false&lt;/code&gt; for each build.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/9O3gyeylMO-320.webp 320w, https://www.danyuschick.com/assets/images/9O3gyeylMO-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/9O3gyeylMO-320.jpeg 320w, https://www.danyuschick.com/assets/images/9O3gyeylMO-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Netlify build settings&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/9O3gyeylMO-320.jpeg&quot; width=&quot;862&quot; height=&quot;415&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;One caveat, in the event that adding &lt;code&gt;CI=false&lt;/code&gt; to the build command &lt;em&gt;still&lt;/em&gt; doesn&#39;t work, trying setting &lt;code&gt;CI=&amp;quot;&amp;quot;&lt;/code&gt; because older versions of &lt;code&gt;react-scripts&lt;/code&gt; behave differently and may require an empty string. More information can be found in this thread: &lt;a href=&quot;https://github.community/t/treating-warnings-as-errors-because-process-env-ci-true/18032&quot;&gt;https://github.community/t/treating-warnings-as-errors-because-process-env-ci-true/18032&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Jun 2020 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/netlify-deploy-treating-warnings-as-errors/</guid>
      </item>
      
      <item>
        <title>Deep Dive into My New Website (2020)</title>
        <link>https://www.danyuschick.com/articles/deep-dive-into-my-new-website/</link>
        <description>&lt;p&gt;Can you believe it&#39;s been three years since I&#39;ve last updated my personal website? Three!?!? I sure can&#39;t. Since then, I&#39;ve moved countries, visited many others, completed my horror movie sleeve, written a novel, and am currently laid off surviving a pandemic.&lt;/p&gt;
&lt;p&gt;Of course, in similarly dramatic fashion, the world of frontend development has also changed. It was about time my personal site did, too.&lt;/p&gt;
&lt;h2&gt;The Goals&lt;/h2&gt;
&lt;p&gt;When I first started with design ideas, the goal was simple--simplicity. I wanted simple content, simple maintenance, and simple consumption.&lt;/p&gt;
&lt;p&gt;My previous sites, dating as far back as I can remember, focused solely on my life as a frontend developer but I didn&#39;t want that anymore. Instead, I wanted something more high level and broad. I wanted to create a site that represented more of me, my interests, goals, and personality.&lt;/p&gt;
&lt;p&gt;That said, with a clear primary goal, my developer sense tingled and I was ready to explore some new (&lt;em&gt;to me&lt;/em&gt;) tech and tooling.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*RnvFP7JqYxXhuypMskyWfw.jpeg&quot; alt=&quot;Seth Meyers segue meme&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Tech Stack&lt;/h2&gt;
&lt;p&gt;It must have been muscle memory because once I decided to create my repo and architect the site, I opened my terminal and started typing &lt;code&gt;create-react-app&lt;/code&gt;. When I built my last site, I was quite new to React. Three (&lt;em&gt;!?!?!)&lt;/em&gt; years later and its apparently second nature.&lt;/p&gt;
&lt;p&gt;I wanted to change it up, but like, only a bit.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;&lt;strong&gt;Gatsby&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Two areas my last site suffered were performance and SEO. Sacrilegious, I know! Using &lt;a href=&quot;https://www.gatsbyjs.org/&quot;&gt;Gatsby&lt;/a&gt; as my framework seemed to address both of those concerns out of the box along with so much more. I liked the idea of serving static pages, which worked for a lot of my content, but with the ability to write &lt;code&gt;fetch&lt;/code&gt; queries for dynamic content where I needed it.&lt;/p&gt;
&lt;p&gt;It took about a day for me to become productive in the new environment. &lt;em&gt;I mean, why do I have to write a GraphQl query to display an image!?&lt;/em&gt; But after that initial learning curve, I started seeing the benefits of the endeavour. I was excited about the improved performance, wide ecosystem of plugins, the incredible feature set of Gatsby Image, and about digging into something new.&lt;/p&gt;
&lt;p&gt;That feeling is the reason I got into development all those years ago and still enjoy it.&lt;/p&gt;
&lt;p&gt;With the framework in place, adding in other familiar pieces like &lt;a href=&quot;https://www.netlify.com/&quot;&gt;&lt;strong&gt;Netlify&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;,&lt;/em&gt; &lt;a href=&quot;https://graphql.org/&quot;&gt;&lt;strong&gt;GraphQl&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&quot;https://styled-components.com/&quot;&gt;&lt;strong&gt;Styled Components&lt;/strong&gt;&lt;/a&gt; gave me a chance to get more experience with tools I already use.&lt;/p&gt;
&lt;p&gt;The initial MVP took a week(&lt;em&gt;ish&lt;/em&gt;) of all-consumed development, and now that the proverbial dust is settling, it&#39;s nice taking a step back to digest what just happened.&lt;/p&gt;
&lt;h2&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;While building the site, I&#39;d taken note of several things that had either given me trouble or kept me from it. Most of them will become full posts themselves but I wanted to highlight them here.&lt;/p&gt;
&lt;h3&gt;Gatsby Image&lt;/h3&gt;
&lt;p&gt;Believe it or not, after the rough start, Gatsby Image turned out to be one of my favorite pieces of this project. After getting my head around it, the ability to optimize images for countless settings and format them with fallbacks not only handled my images better than I could have done myself but it did so in a fraction of the time I would have spent.&lt;/p&gt;
&lt;p&gt;Read more about my experience with Gatsby Image:&lt;br /&gt;
&lt;a href=&quot;https://www.danyuschick.com/articles/art-direction-with-gatsby-image-&amp;amp;-the-aspect-ratio-bug/&quot;&gt;&lt;em&gt;Art Direction with Gatsby Image &amp;amp; the Aspect Ratio Bug&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;CSS Clamp()&lt;/h3&gt;
&lt;p&gt;I stumbled across &lt;code&gt;clamp()&lt;/code&gt; while looking into fluid typography options. The main process I was familiar with involves writing &lt;code&gt;calc&lt;/code&gt; equations against the display width that, for me, made the code hard to read. The result wasn&#39;t visible in the code and I felt helpless when it came to extreme display sizes. However, using &lt;code&gt;clamp()&lt;/code&gt; addressed both of those concerns by allowing me to define minimum and maximum font-sizes and let the font scale fluidly between the two. I may not know the exact &lt;code&gt;font-size&lt;/code&gt; on a specific phone or 24&amp;quot; monitor but I do know it&#39;ll be within that range and that&#39;s good enough for me.&lt;/p&gt;
&lt;p&gt;Read more about how I used &lt;code&gt;clamp()&lt;/code&gt;:&lt;br /&gt;
&lt;a href=&quot;https://www.danyuschick.com/articles/fluid-typography-with-css-clamp-is-my-new-favorite-thing&quot;&gt;&lt;em&gt;Fluid Typography with CSS Clamp() is My New Favorite Thing&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Fighting CORS with Netlify Functions&lt;/h3&gt;
&lt;p&gt;I don&#39;t know many developers who haven&#39;t dropped an F-bomb or two at CORS errors. While in local development, it&#39;s fine prefacing third-party API requests with a proxy like &lt;a href=&quot;https://cors-anywhere.herokuapp.com/&quot;&gt;CORS-Anywhere&lt;/a&gt; but in production, that&#39;s just not going to fly.&lt;/p&gt;
&lt;p&gt;Luckily, Netlify Functions stepped up in the clutch. Using the Netlify CLI, I was able to create a &lt;code&gt;node-fetch&lt;/code&gt; proxy that runs both locally and in production to bypass infuriating CORS issues. &lt;em&gt;[sigh of relief]&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Spotify Auth&lt;/h3&gt;
&lt;p&gt;This one is just a personal victory. For some reason, I&#39;ve had a mental block toward the Spotify API and its authorization process. But I was determined to display my love of power metal on this site. I worked my way through all the codes, tokens, and secrets to finally unravel that mystery.&lt;/p&gt;
&lt;h2&gt;Final Thoughts&lt;/h2&gt;
&lt;p&gt;From the design to the implementation, I&#39;m so excited about this site. I believe it&#39;s a good representation of both who and where I am as an individual. Taking on some new tech and digging further into familiar libraries reminded me of why I got into development and how much fun it can be.&lt;/p&gt;
&lt;p&gt;Creativity, challenge, and change are why I enjoy development and this project checked all those boxes.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 May 2020 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/deep-dive-into-my-new-website/</guid>
      </item>
      
      <item>
        <title>Art Direction with Gatsby Image &amp; the Aspect Ratio Bug</title>
        <link>https://www.danyuschick.com/articles/art-direction-with-gatsby-image-&amp;amp;-the-aspect-ratio-bug/</link>
        <description>&lt;p&gt;I&#39;ll be real; when I first entered the Gatsby ecosystem and tried to load my first image, I was like &#39;&lt;em&gt;whaaaaaaat?&#39;&lt;/em&gt;. And if I was that befuddled trying to load a single picture, how in the world was I going to wrangle Gatsby Image into handling fluid art-directed images, compression, and formatting with broad support?&lt;/p&gt;
&lt;p&gt;In an unexpected word--easily(&lt;em&gt;ish&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;In a lot more words...&lt;/p&gt;
&lt;h2&gt;Gatsby Image&lt;/h2&gt;
&lt;p&gt;The web would be trash without pictures but it&#39;s also trash whenever those pictures take....way.....too......long to load. Enter &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-image/&quot;&gt;Gatsby Image&lt;/a&gt;, an incredibly powerful plugin for optimizing and serving your images.&lt;/p&gt;
&lt;p&gt;**&lt;em&gt;Note:&lt;/em&gt;*&lt;em&gt;I won&#39;t be going into much detail of getting started with Gatsby Image so if you&#39;re brand new to it, I would recommend the&lt;/em&gt; &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-image/#install&quot;&gt;&lt;em&gt;official docs&lt;/em&gt;&lt;/a&gt; *first to gain a base understanding on installation and getting started.*&lt;/p&gt;
&lt;p&gt;After I got my head around using the (surprisingly fun) GraphQl UI to construct my image queries, I found myself playing with a lot of features and experimenting with what I could do and how I could apply it to my most recent project. Once I felt more familiar with the process, I defined the requirements for my primary header image and set off to construct my query.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Requirements&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I needed different images at different widths--art direction&lt;/li&gt;
&lt;li&gt;I needed to serve &lt;code&gt;webp&lt;/code&gt; images for better performance with fallbacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/vG_HO5RwLG-320.webp 320w, https://www.danyuschick.com/assets/images/vG_HO5RwLG-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/vG_HO5RwLG-320.jpeg 320w, https://www.danyuschick.com/assets/images/vG_HO5RwLG-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Daniel Yuschick in Hang En Cave, taken by @nome_sapien&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/vG_HO5RwLG-320.jpeg&quot; width=&quot;862&quot; height=&quot;344&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;h2&gt;Art Direction&lt;/h2&gt;
&lt;p&gt;Because my primary image was wide and short, it looked good on large displays, but on smaller screens, it became too compressed and indistinguishable. So I made several different versions, each one cropped tighter than the last, so as displays narrowed, the image aspect ratio adapted.&lt;/p&gt;
&lt;p&gt;I ended up with five images with px dimensions and (aspect ratios) as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2500 x 999 (2.5:1)&lt;/li&gt;
&lt;li&gt;2000 x 888 (2.25:1)&lt;/li&gt;
&lt;li&gt;1500 x 666 🤘 (2.25:1)&lt;/li&gt;
&lt;li&gt;1000 x 571 (1.75:1)&lt;/li&gt;
&lt;li&gt;500 x 333 (1.5:1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I opened Gatsby&#39;s GraphQl UI and began constructing my query. I started by querying a single image.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;query HeaderImageQuery &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;relativePath&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;header-500.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    childImageSharp &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;fluid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;maxWidth&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        aspectRatio&lt;br /&gt;        base64&lt;br /&gt;        sizes&lt;br /&gt;        src&lt;br /&gt;        srcSet&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a standard &lt;code&gt;file&lt;/code&gt; query which selects &lt;code&gt;header-500.jpg&lt;/code&gt;. Additionally, it tells Gatsby Image to treat the photo as &lt;code&gt;fluid&lt;/code&gt; with a &lt;code&gt;maxWidth&lt;/code&gt; of &lt;code&gt;500&lt;/code&gt;px. When this photo is ultimately rendered Gatsby Image will place it inside a container and use the image&#39;s aspect ratio to size the container, ensuring it scales smoothly without distortion. You can read about this practice &lt;a href=&quot;https://css-tricks.com/aspect-ratio-boxes/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, I needed to expand this query to include the other versions of my header image. To do that, I created an object query and assigned a key to each &lt;code&gt;file&lt;/code&gt; request.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;query HeaderImageQuery &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;img500&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;relativePath&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;header-500.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    childImageSharp &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;fluid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        aspectRatio&lt;br /&gt;        base64&lt;br /&gt;        sizes&lt;br /&gt;        src&lt;br /&gt;        srcSet&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;img1000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;relativePath&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;header-1000.jpg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    childImageSharp &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;fluid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;maxWidth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        aspectRatio&lt;br /&gt;        base64&lt;br /&gt;        sizes&lt;br /&gt;        src&lt;br /&gt;        srcSet&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;repeat &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; the remaining images&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After testing this query in the GraphQl UI, it was time to bring it into my codebase which is where I could address one of my requirements--formatting the images to &lt;code&gt;webp&lt;/code&gt; with a fallback where the filetype isn&#39;t supported.&lt;/p&gt;
&lt;p&gt;I did this by using the &lt;code&gt;GatsbyImageSharpFluid_withWebp&lt;/code&gt; &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-image/#fragments&quot;&gt;query fragment&lt;/a&gt; provided by Gatsby Image. This query will now optimize the base &lt;code&gt;jpg&lt;/code&gt;s but also create &lt;code&gt;webp&lt;/code&gt; versions on build. Because not all browsers support &lt;code&gt;webp&lt;/code&gt; we need the &lt;code&gt;jpg&lt;/code&gt;s available as fallbacks. These will come into play in a moment when we render the images.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useStaticQuery&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; graphql &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;FunctionComponent&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useStaticQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;graphql&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;**&lt;br /&gt;    query HeaderImageQuery {&lt;br /&gt;      img500: file(relativePath: {eq: &quot;header-500.jpg&quot;}) {&lt;br /&gt;        childImageSharp {&lt;br /&gt;          fluid(maxWidth: 500) {&lt;br /&gt;            ...GatsbyImageSharpFluid_withWebp&lt;br /&gt;            aspectRatio&lt;br /&gt;            base64&lt;br /&gt;            sizes&lt;br /&gt;            src&lt;br /&gt;            srcSet&lt;br /&gt;          }&lt;br /&gt;        }&lt;br /&gt;      }&lt;br /&gt;      *...repeat for the remaining images*&lt;br /&gt;    }&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;other component stuff we&#39;ll &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; to&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After this query executes, the &lt;code&gt;data&lt;/code&gt; variable looks something like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;img500&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;img1000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;img1500&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;img2000&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;img2500&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typically, whenever querying a single fluid image, the data would be passed into the Gatsby Image &lt;code&gt;Img&lt;/code&gt; component as is.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Img &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby-image&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Img fluid&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;node&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childImageSharp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fluid&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Single image&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But in this case, I&#39;ve queried five images and, as a result, can&#39;t pass the &lt;code&gt;data&lt;/code&gt; object to the &lt;code&gt;Img&lt;/code&gt; component the same way. Instead, I have to use the &lt;code&gt;data&lt;/code&gt; object to build a &lt;code&gt;sources&lt;/code&gt; array and &lt;em&gt;that&lt;/em&gt; is what we&#39;ll pass into the component.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sources&lt;/code&gt; array contains an object for each queried image which contains the &lt;code&gt;childImageSharp.fluid&lt;/code&gt; data, as seen above, and a &lt;code&gt;media&lt;/code&gt; query to determine when the image should be used.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sources &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;img500&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childImageSharp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fluid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;(max-width: 500px)&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;repeat &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; the remaining images&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you&#39;re familiar with writing CSS media queries, that should make some sense. If not, what I&#39;m doing in the code snippet above is saying &#39;&lt;em&gt;use the img500 query data whenever the display width is 500px or smaller&lt;/em&gt;&#39;.&lt;/p&gt;
&lt;p&gt;Once I created the &lt;code&gt;sources&lt;/code&gt; array, I could pass it to the &lt;code&gt;Img&lt;/code&gt; component.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Img &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby-image&quot;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sources &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;img500&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;childImageSharp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fluid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;media&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;(max-width: 500px)&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;repeat &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; the remaining images&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Img&lt;br /&gt;    sources&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;sources&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    fluid&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;sources&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    alt&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Daniel Yuschick by @nome_sapien&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Img&lt;/code&gt; component will render HTML &lt;code&gt;picture&lt;/code&gt; elements containing the source data for all of the freshly-optimized-and-formatted images. This includes the &lt;code&gt;jpg&lt;/code&gt;s as well as the &lt;code&gt;webp&lt;/code&gt; images, allowing browsers to display &lt;code&gt;webp&lt;/code&gt; where supported and the &lt;code&gt;jpg&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;I rushed to scientifically test this by dragging my browser window from large to small and back again to watch the header image scale and adjust smoothly.&lt;/p&gt;
&lt;p&gt;Only it didn&#39;t.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/0*fpv-Bmg_26wx-4sx.gif&quot; alt=&quot;Deandre Jordan of the Los Angeles Clippers exclaiming &amp;quot;What the fuck&amp;quot;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Gatsby Image Aspect Ratio Bug&lt;/h2&gt;
&lt;p&gt;Don&#39;t worry, I also found it dry that I spent time mentioning image aspect ratios earlier. But it led us here.&lt;/p&gt;
&lt;p&gt;You see, whenever building the &lt;code&gt;sources&lt;/code&gt; array, Gatsby Image takes the aspect ratio of the first image and ignores the others. This is important because when displaying &lt;code&gt;fluid&lt;/code&gt; images, Gatsby Image uses the aspect ratio to size the wrapper. So if the aspect ratio is off, so is the scale and appearance of the fluid image.&lt;/p&gt;
&lt;p&gt;So whenever I put &lt;code&gt;img500&lt;/code&gt; at the beginning of my array, the header looked great on mobile but far too large on desktop. Whenever I put &lt;code&gt;img2500&lt;/code&gt; first, the header looked perfect at full size but far too small on mobile. It was like &lt;em&gt;Goldilocks and the Three Bears&lt;/em&gt; except I never threw F-bombs so liberally at porridge.&lt;/p&gt;
&lt;p&gt;Resolving this issue took a little CSS brute force.&lt;/p&gt;
&lt;p&gt;We need to select the &lt;code&gt;div&lt;/code&gt; element Gatsby Image uses to size our images and update its &lt;code&gt;padding-bottom&lt;/code&gt; value manually. Luckily, despite Gatsby Image only using the first image&#39;s aspect ratio, our query returns the value for each image queried. Those values, or in my case, the &lt;code&gt;sources&lt;/code&gt; array itself, can be used to create CSS rules to overwrite the incorrect &lt;code&gt;padding-bottom&lt;/code&gt; values calculated by Gatsby Image.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note, I am using&lt;/em&gt; &lt;a href=&quot;https://styled-components.com/&quot;&gt;&lt;em&gt;Styled Components&lt;/em&gt;&lt;/a&gt; &lt;em&gt;so the syntax may not be what you&#39;re using but the premise remains the same--use the aspect ratios returned in the query to define new CSS rules at specific breakpoints.&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ResponsiveImage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;styled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Img&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;  &gt; div:first-child {&lt;br /&gt;    @media (max-width: 500px) {&lt;br /&gt;      padding-bottom: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sources&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectRatio&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;% !important&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;    }&lt;br /&gt;    @media (min-width: 501px) and (max-width: 1000px) {&lt;br /&gt;      padding-bottom: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sources&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;aspectRatio&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;% !important&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;;&lt;br /&gt;    }&lt;br /&gt;  }&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I know, I&#39;m using &lt;code&gt;!important&lt;/code&gt;. Gross. But in this case we need it to override the specificity of the directly-applied values from Gatsby Image.&lt;/p&gt;
&lt;p&gt;With these styles in place, I returned to my browser, held my breathe, and resized the window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/gatsby-art-direction/site-demo-1.gif&quot; alt=&quot;Window resizing to demonstrate aspect ratio fix&quot; /&gt;&lt;/p&gt;
&lt;p&gt;From the gif above you can see at smaller widths, the header image is cropped more tightly to retain height and focus while at larger widths, it has a wider aspect ratio to keep the height from filling the entire viewport and the image from distorting.&lt;/p&gt;
&lt;h2&gt;Review&lt;/h2&gt;
&lt;p&gt;Let&#39;s return to my original requirements and see how Gatsby Image addressed them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;✅ I needed different images at different widths--art direction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using Gatsby&#39;s GraphQl UI, I was able to create an object of fluid image queries for each image I wanted to display. I passed that response into Gatsby Image&#39;s &lt;code&gt;Img&lt;/code&gt; component and then resolved the aspect ratio bug with CSS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;✅ I needed to serve&lt;/strong&gt; &lt;code&gt;**webp**&lt;/code&gt; &lt;strong&gt;images for better performance with fallbacks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;By including the &lt;code&gt;GatsbyImageSharpFluid_withWebp&lt;/code&gt; query fragment from Gatsby Image, my images were formatted to &lt;code&gt;webp&lt;/code&gt; at build time with fallback &lt;code&gt;jpg&lt;/code&gt;s optimized and ready to display if needed.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Set aside the bug with aspect ratios, which isn&#39;t going to be an issue for everyone, I found this process to be much more convenient than I first expected. Gatsby Image has left me impressed and with a sense of wielding immense power.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/0*hwHCEwUy88n5VOhz.gif&quot; alt=&quot;Doom Guy wields all the power.&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-image/&quot;&gt;Gatsby Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-image/#art-directing-multiple-images&quot;&gt;Gatsby Image Art Direction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gatsbyjs/gatsby/issues/15189&quot;&gt;GitHub Issue: Gatsby Image doesn&#39;t support different aspect ratios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 04 May 2020 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/art-direction-with-gatsby-image-&amp;amp;-the-aspect-ratio-bug/</guid>
      </item>
      
      <item>
        <title>Fluid Typography with CSS Clamp() is My New Favorite Thing</title>
        <link>https://www.danyuschick.com/articles/fluid-typography-with-css-clamp-is-my-new-favorite-thing/</link>
        <description>&lt;p&gt;According to Twitter, which is definitely an accurate representation of real life, I’m in the extreme minority of developers who actually enjoy CSS. I got into development (&lt;em&gt;all those years ago&lt;/em&gt;) by way of design and as a designer first, working in CSS unlocked so much creative potential.&lt;/p&gt;
&lt;p&gt;As the web shifted into a more fluid experience (&lt;em&gt;all those years ago&lt;/em&gt;), things like Flexbox and Grid blew my mind with their incredible potential for responsive design. And on a smaller scale, this little CSS function has done the same thing recently.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;CSS Clamp()&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;clamp()&lt;/code&gt; function seems small but wields incredible power by clamping a value between an upper and lower range. Think &lt;code&gt;minmax()&lt;/code&gt; but for more than rows and columns.&lt;/p&gt;
&lt;p&gt;The first place I found the value of &lt;code&gt;clamp()&lt;/code&gt; was font sizes.&lt;/p&gt;
&lt;p&gt;Fluid typography can get a bit complicated for me. Running various calculations around a viewport size had me feeling both uncertain and imprecise because the code didn’t tell me what size the font would &lt;em&gt;actually&lt;/em&gt; be. And I couldn’t always account for display extremes.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;clamp()&lt;/code&gt; provides that same fluidity with better control and readability.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1.75rem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 3vw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 2.1rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s break down what this function does.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;clamp()&lt;/code&gt; functions takes three values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A minimum value&lt;/li&gt;
&lt;li&gt;A preferred value&lt;/li&gt;
&lt;li&gt;A maximum value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With those values in mind, you can see the code snippet above defines the minimum size as &lt;code&gt;1.75rem&lt;/code&gt; and the maximum size as &lt;code&gt;2.1rem&lt;/code&gt;. In my designs from mobile on up, I don’t want my &lt;code&gt;h1&lt;/code&gt; font to ever fall outside of that range.&lt;/p&gt;
&lt;p&gt;The fluidity comes into play by setting the middle value, the preferred size, to a dynamic value. I like to use &lt;code&gt;vw&lt;/code&gt; units that allow the font to scale with the size of the display but stay within the range of &lt;code&gt;1.75rem&lt;/code&gt; to &lt;code&gt;2.1rem&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the &lt;code&gt;clamp()&lt;/code&gt; values defined, I tested the &lt;code&gt;h1&lt;/code&gt; element by dragging my browser smaller and larger and watched as the font size scaled smoothly within its range.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/wiW0EBMmo0-320.webp 320w, https://www.danyuschick.com/assets/images/wiW0EBMmo0-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/wiW0EBMmo0-320.jpeg 320w, https://www.danyuschick.com/assets/images/wiW0EBMmo0-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Demonstrating fluid typography with CSS clamp()&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/wiW0EBMmo0-320.jpeg&quot; width=&quot;862&quot; height=&quot;450&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Admittedly, it’s a small size range but I now feel more in control of how text will behave in my projects.&lt;/p&gt;
&lt;p&gt;But while we’re at it, why stop at text? I’ve found several other uses for &lt;code&gt;clamp()&lt;/code&gt; such as border sizes, padding values, and even element widths. Maybe a bit overboard but development should be fun and this little function brought the fun in spades.&lt;/p&gt;
&lt;h2&gt;Browser Support (Looking at you, Safari!)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 21.3.21:&lt;/strong&gt; Browser support has expanded and standardized since originally writing this article to include more recent versions of Safari. The remainder of this section, though, is still written based on the lack of Safari support.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nothing good is easy and when I tested my site in Safari, I was reminded of that when everything appeared janky.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/UHErM3ySx1-320.webp 320w, https://www.danyuschick.com/assets/images/UHErM3ySx1-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/UHErM3ySx1-320.jpeg 320w, https://www.danyuschick.com/assets/images/UHErM3ySx1-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Support for the clamp() function from caniuse.com&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/UHErM3ySx1-320.jpeg&quot; width=&quot;862&quot; height=&quot;256&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;Some browsers are yet to support &lt;code&gt;clamp()&lt;/code&gt; but luckily, there are two other small, clutch functions– &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; we can use. When put together, they can provide similar functionality to &lt;code&gt;clamp()&lt;/code&gt; but also play nicely with additional browsers.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1.75rem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 3vw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 2.1rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clamp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1.75rem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 3vw&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 2.1rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;1.75rem&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 3vw&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 2.1rem&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the code snippet you can see that when combined, &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; behave very similarly to &lt;code&gt;clamp()&lt;/code&gt; but where &lt;code&gt;clamp()&lt;/code&gt; is available, I prefer it.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Sure, you could argue this article should be titled &lt;em&gt;Fluid Typography with CSS min() &amp;amp; max() is My New Favorite Thing.&lt;/em&gt; That’s fair. But I came across &lt;code&gt;clamp()&lt;/code&gt; first, so it feels more like the feature while &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; feel more like the fallback. I do prefer the readability of &lt;code&gt;clamp()&lt;/code&gt; though, and prefer writing only one function to nesting two together.&lt;/p&gt;
&lt;p&gt;Preferences aside, I’m happy to feel more in control of fluid typography now and I have &lt;code&gt;clamp()&lt;/code&gt; to thank.&lt;/p&gt;
</description>
        <pubDate>Sun, 03 May 2020 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/fluid-typography-with-css-clamp-is-my-new-favorite-thing/</guid>
      </item>
      
      <item>
        <title>Translating Placeholder, Alt &amp; Title Text with React-Intl</title>
        <link>https://www.danyuschick.com/articles/translating-placeholder-alt-&amp;amp;-title-text-with-react-intl/</link>
        <description>&lt;h2&gt;Update: 20 April, 2020&lt;/h2&gt;
&lt;p&gt;Since writing the original post, &lt;code&gt;react-intl&lt;/code&gt; has released newer versions that include their own hooks, making the process of translating attribute text a bit cleaner. And, arguably, the best part is the incredibly quick migration from the original &lt;code&gt;HOC&lt;/code&gt; approach.&lt;/p&gt;
&lt;p&gt;I will be showing the updated code block in this section but for a better understanding and more background, give the original post a glance.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Now, when handling translations within your app, &lt;code&gt;react-intl&lt;/code&gt; exposes the &lt;code&gt;useIntl&lt;/code&gt; hook.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useIntl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-intl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the hook imported, a new &lt;code&gt;intl&lt;/code&gt; instance can be instantiated inside the &lt;code&gt;Nav&lt;/code&gt; component providing access to its methods, particularly, &lt;code&gt;intl.formatMessage()&lt;/code&gt; which we will use to toggle title texts based on the &lt;code&gt;isOpen&lt;/code&gt; state of our component.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;\&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useIntl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-intl&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;\&lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;isOpen&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setIsOpen&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; intl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useIntl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;br /&gt;      title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isOpen&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu.close&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu.open&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setIsOpen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isOpen&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;       &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Icon type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;isOpen &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu_close&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu_open&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Original Post&lt;/h2&gt;
&lt;p&gt;Personally, I never looked into internationalization (i18n) until I moved to Finland. None of the projects I had worked on had required it. After spending some time with it, I found that the available libraries, specifically &lt;code&gt;react-intl&lt;/code&gt; make the localization process quite smooth with one exception, translating text within attributes such as &lt;code&gt;alt&lt;/code&gt; text and &lt;code&gt;title&lt;/code&gt; values for icons.&lt;/p&gt;
&lt;h3&gt;Why are these attributes difficult to translate?&lt;/h3&gt;
&lt;p&gt;Translating attribute strings is difficult due to the common implementation of i18n libraries, such as &lt;code&gt;react-intl&lt;/code&gt;, which will be the library I am working with in this article.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yahoo/react-intl&quot;&gt;Visit React-Intl on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s look at a basic use case with this library.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FormattedMessage&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;menu.open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this snippet above, we&#39;re overlooking the configuration of the language &lt;code&gt;Provider&lt;/code&gt; and looking directly at using the &lt;code&gt;FormattedMessage&lt;/code&gt; component. (&lt;a href=&quot;https://github.com/yahoo/react-intl/wiki&quot;&gt;To see a full configuration walkthrough, visit the React-Intl docs&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But as we can see, the plain &lt;code&gt;button&lt;/code&gt; element contains a single string that will translate the &lt;code&gt;menu.open&lt;/code&gt; string based on the app&#39;s language settings. The translation itself, however, is in the form of an individual component which makes the following implementation difficult.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FormattedMessage&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;menu.open&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Icon&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;menu&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above, we have a button that contains only a menu icon that will be responsible for toggling the navigation. For accessibility purposes, either the &lt;code&gt;button&lt;/code&gt; or &lt;code&gt;icon&lt;/code&gt; should have a &lt;code&gt;title&lt;/code&gt; attribute to verbally communicate with screen readers what the icon does visually. However, even looking at that snippet, I wouldn&#39;t expect that to work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And that is where the problem lies. How do you translate attribute strings?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Providing Translated Text to Attributes&lt;/h2&gt;
&lt;p&gt;I struggled finding documentation to this challenge and found myself having to do a lot of searching and experimenting on my own until it happened to work. But let&#39;s start at the beginning.&lt;/p&gt;
&lt;h3&gt;injectIntl(component)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;React-Intl&lt;/code&gt; provides a High Order Component (HOC) in its library that we will use called &lt;code&gt;injectIntl&lt;/code&gt;. This provides us access to the imperative formatting API which we will look at soon.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a look at our very basic component file.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; injectIntl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;react-intl&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Nav&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;toggleNav&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Close Menu&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Open Menu&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggleNav&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;        &amp;lt;Icon type=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu_close&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu_open&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;injectIntl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Nav&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have a super generic component that will display an icon button. Depending on the state of the navigation, the button will show either the open or close icon with the appropriate instructional title as well with every click toggling the &lt;code&gt;isOpen&lt;/code&gt; value in the &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;While exporting the component, we wrap it in the &lt;code&gt;injectIntl&lt;/code&gt; HOC providing us access to the formatting API which is passed to the wrapped component via &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; intl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After grabbing the &lt;code&gt;intl&lt;/code&gt; prop from our HOC, we&#39;re now able to leverage it and its methods to perform inline translations. For this example, we will look at the &lt;code&gt;formatMessage&lt;/code&gt; method which accepts an options object with the required key being an &lt;code&gt;id&lt;/code&gt; to the message.&lt;/p&gt;
&lt;p&gt;So let&#39;s revisit our &lt;code&gt;render&lt;/code&gt; method from our generic component.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; intl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;br /&gt;      title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu.close&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;formatMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu.open&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toggleNav&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Icon type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isOpen &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu_close&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;menu_open&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that&#39;s it. By wrapping our &lt;code&gt;Nav&lt;/code&gt; component inside of the &lt;code&gt;injectIntl&lt;/code&gt; HOC, we&#39;re able to use the translation API directly making it possible to localize attribute texts.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/yahoo/react-intl/wiki/API#injection-api&quot;&gt;More information on the Injection API can be found in the docs.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;What about PropTypes?&lt;/h3&gt;
&lt;p&gt;In my project, I am using React PropTypes to check data types within my components. That includes checking the &lt;code&gt;intl&lt;/code&gt; prop that is passed down from the HOC. To ensure this is covered by type checking, I updated my &lt;code&gt;Nav&lt;/code&gt; component with the following:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; intlShape&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; injectIntl &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-intl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;NavBar&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;propTypes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  intl&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; intlShape&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isRequired&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using the HOC, I am now able to ensure my input placeholders, image alt texts, icon titles, and any other attribute text values can be translated ensuring accessible communication across locales.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Oct 2018 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/translating-placeholder-alt-&amp;amp;-title-text-with-react-intl/</guid>
      </item>
      
      <item>
        <title>Building Custom &amp; Localised Error Messages with Joi</title>
        <link>https://www.danyuschick.com/articles/building-custom-&amp;amp;-localised-error-messages-with-joi/</link>
        <description>&lt;p&gt;In my previous article, &lt;a href=&quot;https://www.danyuschick.com/articles/what-ive-learned-validating-with-joi/&quot;&gt;What I&#39;ve Learned Validating with Joi&lt;/a&gt;, I detailed general form validation that plays to the strengths of Joi in my latest project. But an area of weakness in the library is one I had set out to tackle since - displaying custom internationalisation (i18n) error messages.&lt;/p&gt;
&lt;p&gt;First, there are libraries like &lt;a href=&quot;https://github.com/dialexa/relish&quot;&gt;Relish&lt;/a&gt; that help address this issue but I believed there was a solution without bringing in another library. I set out to rewrite the project&#39;s validation from scratch for two reasons; 1) to simplify logic that was becoming a challenge to scale and 2) gain a deeper understanding of Joi and how it can be used.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So where do you even start? I started with the most minimalist approach that mimicked the project&#39;s current implementation. I wanted to validate one small piece of data to create an error so I could review the raw data returned from Joi.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Joi &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;joi-browser&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; schema&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When that validation failed, Joi returned an object with four properties, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;then&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt;. The two important properties here are &lt;code&gt;error&lt;/code&gt;, which contains all the relevant error data, and &lt;code&gt;value&lt;/code&gt;, which contains the original data source. That&#39;s good to verify that the data you&#39;re validating is what you&#39;re expecting. We will focus on the &lt;code&gt;error&lt;/code&gt; object though.&lt;/p&gt;
&lt;p&gt;When you expand the &lt;code&gt;error&lt;/code&gt; object you find a few more properties but we will focus immediately on &lt;code&gt;details&lt;/code&gt;, an array containing each individual error object.&lt;/p&gt;
&lt;p&gt;Let&#39;s dig into the &lt;code&gt;details&lt;/code&gt; error object from the validation above.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/REQkT51njx-320.webp 320w, https://www.danyuschick.com/assets/images/REQkT51njx-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/REQkT51njx-320.jpeg 320w, https://www.danyuschick.com/assets/images/REQkT51njx-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Raw error object returned from Joi&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/REQkT51njx-320.jpeg&quot; width=&quot;862&quot; height=&quot;181&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;The object contains a lot of great information. It may not all be useful to us &lt;em&gt;yet&lt;/em&gt; but we will soon convert this into data that we can use to achieve our goal of custom i18n error messages.&lt;/p&gt;
&lt;p&gt;So what data will be useful for us? Ultimately, what do we need to achieve our goal? The target data I sketched out looked like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; what type &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; error was thrown&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; what field has the error&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;errorMsg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; what error message is shown&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I wrote that structure down and sought out to build that with the data provided by Joi.&lt;/p&gt;
&lt;p&gt;How do we build each property?&lt;/p&gt;
&lt;h2&gt;Type&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;type&lt;/code&gt; property provided by Joi is vitally important. In the example above it returns &lt;code&gt;number.min&lt;/code&gt; which is the validation method that caused the error. The &lt;code&gt;type&lt;/code&gt; sent back from Joi directly relates to the error-causing method and, most importantly, is consistent based on the method names.&lt;/p&gt;
&lt;p&gt;With this information we can begin to target messages. For example, when there is a &lt;code&gt;number.min&lt;/code&gt; error &lt;code&gt;type&lt;/code&gt; we could return a message like &lt;em&gt;&amp;quot;Sorry, you must be at least 21 to enter.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;But what if there is a field later in the app that requires the user to earn at least $500/month.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;income&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;income&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When that data is validated it&#39;ll also return a &lt;code&gt;number.min&lt;/code&gt; error type which would result in the same &lt;em&gt;&amp;quot;Sorry, you must be at least 21 to enter.&amp;quot;&lt;/em&gt; That&#39;s not what we want. So we need to learn how to target the specific field next.&lt;/p&gt;
&lt;h2&gt;Path&lt;/h2&gt;
&lt;p&gt;To create the error messages I would need to know for which field the error occurred. In order to do that I had to better understand the &lt;code&gt;path&lt;/code&gt; property. This property returns the steps taken within the &lt;code&gt;schema&lt;/code&gt;. In our &lt;code&gt;schema&lt;/code&gt; above, we only had one level which results in what we see, &lt;code&gt;[&#39;age&#39;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But let&#39;s modify our earlier example to demonstrate how the &lt;code&gt;path&lt;/code&gt; is generated.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;income&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;income&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By updating our structures this error now returns a new &lt;code&gt;path&lt;/code&gt; value.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;customer&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;income&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ultimately, the value of the &lt;code&gt;path&lt;/code&gt; property will be used to determine which field has an error. The &lt;code&gt;path&lt;/code&gt; value could be mapped to be useful to us.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; field &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Also note that if your schema does not have any named properties, the &lt;code&gt;path&lt;/code&gt; property will be null.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&#39;re certain you won&#39;t have any conflicting property names anywhere in the &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;schema&lt;/code&gt;, you could get by with mapping only the last value of the &lt;code&gt;path&lt;/code&gt; array. I prefer to &lt;code&gt;join&lt;/code&gt; because, personally, I have to handle validating an array with a variable number of objects.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;movies&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Halloween&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1978&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The Shining&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1980&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sleepaway Camp&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1983&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;movies&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1979&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; schema&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;abortEarly&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example above we have three movies listed but we only want movies that were released before the 80&#39;s. By default, Joi will escape validation once it hits the first error. To emphasise the point of &lt;code&gt;join&lt;/code&gt;ing the &lt;code&gt;path&lt;/code&gt; above, we override that functionality by passing in our options object into the &lt;code&gt;validate&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;abortEarly&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above snippet will return an error object that partially looks like this:&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/Te7FW_F_ii-320.webp 320w, https://www.danyuschick.com/assets/images/Te7FW_F_ii-862.webp 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;source type=&quot;image/jpeg&quot; srcset=&quot;https://www.danyuschick.com/assets/images/Te7FW_F_ii-320.jpeg 320w, https://www.danyuschick.com/assets/images/Te7FW_F_ii-862.jpeg 862w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Error object from Joi demonstrating multiple error paths&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/Te7FW_F_ii-320.jpeg&quot; width=&quot;862&quot; height=&quot;313&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;If you were to always grab the last value of the &lt;code&gt;path&lt;/code&gt; property to identify the field with the error, you&#39;d have a conflict here as both errors exist on the &lt;code&gt;year&lt;/code&gt; field. By &lt;code&gt;join&lt;/code&gt;ing the &lt;code&gt;path&lt;/code&gt; array, I can still receive unique identifiers based on their array index.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;movies_1_year&lt;br /&gt;movies_2_year&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;So what do we have now?&lt;/h3&gt;
&lt;p&gt;Now, we have two pieces of valuable information.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have the error type like &lt;code&gt;number.min&lt;/code&gt; or &lt;code&gt;number.max&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We have a unique field identifier like &lt;code&gt;age&lt;/code&gt; or &lt;code&gt;movies_1_year&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;number.min&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;errorMsg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; what error message is shown&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to choose the error message based on the previous two pieces of information.&lt;/p&gt;
&lt;h2&gt;Message&lt;/h2&gt;
&lt;p&gt;While the Joi error object returns a generally suitable error message, our goal is to have messages that we can easily localise and customise. The project where I have implemented this is built on React and translations are handled using &lt;a href=&quot;https://github.com/yahoo/react-intl&quot;&gt;React-Intl&lt;/a&gt; so the examples will be based around that format.&lt;/p&gt;
&lt;p&gt;To display a localised message with &lt;code&gt;react-intl&lt;/code&gt; I commonly use its &lt;code&gt;FormattedMessage&lt;/code&gt; component.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; FormattedMessage &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react-intl&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FormattedMessage&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app_continue&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From there, the &lt;code&gt;FormattedMessage&lt;/code&gt; component will search the current locale&#39;s &lt;code&gt;i18n&lt;/code&gt; file for the key &lt;code&gt;app_continue&lt;/code&gt; and return its value such as &lt;code&gt;Jatkaa&lt;/code&gt; in Finnish or &lt;code&gt;Continue&lt;/code&gt; in English.&lt;/p&gt;
&lt;p&gt;So what we want to get our heads around here is that our &lt;code&gt;message&lt;/code&gt; property won&#39;t be our &lt;em&gt;message&lt;/em&gt; but our &lt;em&gt;message id&lt;/em&gt;. We can (and should) rename the property to communicate that in our error object.&lt;/p&gt;
&lt;p&gt;For the sake of consistency, we need to define a structure to our &lt;code&gt;i18n&lt;/code&gt; error ids. Let&#39;s use the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;FIELD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we update our mapped object we can see that we now mapped the data that we need.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;number.min&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;errorMsgId&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;error.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;field&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;type&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that mapped object, we now know which field has an error, which type of error it is, and which message id to show.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Let&#39;s take a step back now and review our earlier situation with the &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;income&lt;/code&gt; restriction errors and how our mapped object addresses this.&lt;/p&gt;
&lt;p&gt;In our &lt;code&gt;i18n&lt;/code&gt; file we could have the following &lt;code&gt;id&lt;/code&gt;s:&lt;/p&gt;
&lt;p&gt;&#39;error.age.number.min&#39;: &#39;You must be 21 to enter.&#39;,&lt;br /&gt;
&#39;error.income.number.min&#39;: &#39;You must make at least $500/month&#39;&lt;/p&gt;
&lt;p&gt;By using the &lt;code&gt;type&lt;/code&gt;, the &lt;code&gt;path&lt;/code&gt;, and building our &lt;code&gt;errorMsgId&lt;/code&gt; we can now achieve custom localised error message.&lt;/p&gt;
&lt;h2&gt;Mapping Our Object&lt;/h2&gt;
&lt;p&gt;Okay, so we&#39;ve covered what we&#39;re building and why we&#39;re building it. So let&#39;s piece it all together by walking through how we can map the Joi error object to our new object.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;validateData&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; schema&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;abortEarly&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; errors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; schema&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; errors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;buildUsefulErrorObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;errors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;details&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;buildUsefulErrorObject&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; usefulErrors &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  errors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;usefulErrors&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      usefulErrors&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;error.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;_&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;type&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; usefulErrors&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Whew!&lt;/h2&gt;
&lt;p&gt;That&#39;s quite the block of code so let&#39;s break it down.&lt;/p&gt;
&lt;h3&gt;validateData&lt;/h3&gt;
&lt;p&gt;This is the main function I call. This accepts the &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;schema&lt;/code&gt; arguments. Nothing crazy happens here as I then send them into &lt;code&gt;Joi.validate()&lt;/code&gt; and store the results in the &lt;code&gt;errors&lt;/code&gt; constant. If that contains any errors then we go into our mapping process.&lt;/p&gt;
&lt;h3&gt;buildUsefulErrorObject&lt;/h3&gt;
&lt;p&gt;This is where the magic happens. The function checks to see if the &lt;code&gt;usefulErrors&lt;/code&gt; object contains the error key already, if not, it creates it and builds the content. If the key already exists, it skips it which again shows some value in &lt;code&gt;join&lt;/code&gt;ing the &lt;code&gt;path&lt;/code&gt; names as the field identifier.&lt;/p&gt;
&lt;p&gt;Using the &lt;code&gt;age&lt;/code&gt; and &lt;code&gt;income&lt;/code&gt; errors from above, let&#39;s see how our &lt;code&gt;usefulErrors&lt;/code&gt; object would look.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;number.min&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error.age.number.min&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;income&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;number.min&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;error.income.number.min&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ultimately, this is the object I return back to my app and store in my &lt;code&gt;invalidFields&lt;/code&gt; state property.&lt;/p&gt;
&lt;h2&gt;Displaying the Error Messages&lt;/h2&gt;
&lt;p&gt;With that object stored in the state, it can be used to show error messages in the app with the following methods:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;isInvalid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;invalidFields&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hasOwnProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;getErrorLabelKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;invalidFields&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;invalidFields&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;msg &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using those methods, an error message can be displayed by checking to see if that field&#39;s name exists as a key in our &lt;code&gt;invalidFields&lt;/code&gt; object (&lt;code&gt;isInvalid&lt;/code&gt;) and then grabbing the correct message (&lt;code&gt;getErrorLabelKey&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;error-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;  &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isInvalid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;FormattedMessage&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getErrorLabelKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;age&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;It&#39;s not the most direct solution. I understand that. But rewriting my project&#39;s validation allowed me to solve the problem of custom localised error messages while gaining a better understanding of Joi. This provides flexibility and the ability to scale as the forms and their validation grow.&lt;/p&gt;
&lt;p&gt;Given how frequently I see this issue arise, I am hoping this post can help others dealing with the same challenge.&lt;/p&gt;
</description>
        <pubDate>Fri, 04 May 2018 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/building-custom-&amp;amp;-localised-error-messages-with-joi/</guid>
      </item>
      
      <item>
        <title>What I&#39;ve Learned Validating with Joi</title>
        <link>https://www.danyuschick.com/articles/what-ive-learned-validating-with-joi/</link>
        <description>&lt;p&gt;I&#39;ll be honest, despite all of my experience as a front-end developer I haven&#39;t had a lot of projects that dealt heavily with forms and data. Form validation was just something I never really had to work with much. My most recent project, however, is entirely form- and data-driven and I needed a way to easily handle front-end validation. For this, I turned to &lt;a href=&quot;https://github.com/hapijs/joi&quot;&gt;Joi&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Joi is a validation library that allows you to build schemas to validate JavaScript objects. And what that generally means to me is Joi provides methods to easily validate common data types, such as e-mail addresses and phone numbers. But I&#39;ve also learned that it allows you to easily validate less common data and complex data structures.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And it was here, in Joi&#39;s simplification of complex validation, where I found the urge to share what I&#39;ve learned.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Setting Up&lt;/h2&gt;
&lt;p&gt;For this project, which consisted of React, Redux, and TypeScript, the validation needed to occur on the front end in the browser. Because of this I leveraged both Joi and &lt;a href=&quot;https://github.com/jeffbski/joi-browser&quot;&gt;Joi-Browser&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; joi --dev &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; joi-browser --dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the libraries installed Joi can be imported into your validation file and the writing of schemas can begin.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; Joi &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;joi-browser&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When validating with Joi, two pieces of data are needed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The data object to validate&lt;/li&gt;
&lt;li&gt;The Joi schema&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;validate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; schema&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;options&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An optional third argument could be supplied to customise the validation behaviour but I won&#39;t be covering that in this post.&lt;/p&gt;
&lt;h2&gt;The Basics&lt;/h2&gt;
&lt;h3&gt;Validating Strings&lt;/h3&gt;
&lt;p&gt;This particular project consisted of multiple forms with general information fields --- the user&#39;s name, address, e-mail, and phone number. These fields are pretty straight forward and quite fittingly so is the validation.&lt;/p&gt;
&lt;p&gt;Let&#39;s take a look at an example of some data:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sydney Prescott&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1996 Woodsboro Ln&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;sydney.prescott@woodsborocc.edu&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2135551997&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this general data structure, we can begin writing our Joi schema for validation. Let&#39;s begin with the strings.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One thing I really like about Joi is how it reads. From the schema above it is pretty clear to see what we&#39;re expecting of each property. Additionally, by adding the &lt;code&gt;required()&lt;/code&gt; method we can quickly organise important data while being able to double up on the &lt;code&gt;required&lt;/code&gt; property on form fields themselves for extra security.&lt;/p&gt;
&lt;p&gt;The address field, however, required additional consideration. While living in the States I didn&#39;t think much about additional characters outside of our alphabet. Having moved to Finland, though, made me realise that I must now account for values that have characters such as &lt;code&gt;Ää&lt;/code&gt; and &lt;code&gt;Öö&lt;/code&gt;. Luckily, Joi provides additional ways to support such circumstances.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^[a-z\d\s\-\.\,]*$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-flags&quot;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The schema above introduces a couple nice options. First, the &lt;code&gt;trim()&lt;/code&gt; method will remove any trailing spaces from the value. The &lt;code&gt;max()&lt;/code&gt; method is also used to limit the length of the value to 100 characters.&lt;/p&gt;
&lt;p&gt;But the primary method I&#39;d like to draw attention to here is &lt;code&gt;regex()&lt;/code&gt;. This method allows greater control over what values are supported --- virtually extending the default &lt;code&gt;string()&lt;/code&gt; validation and adding custom behaviour on top.&lt;/p&gt;
&lt;p&gt;If you had noticed, our data object stores the phone number as a string. Let&#39;s see how we can leverage the &lt;code&gt;regex()&lt;/code&gt; method in our schema for this case.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;phone&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;regex&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;^[0-9]{7,10}$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using the &lt;code&gt;regex()&lt;/code&gt; method here, we can validate the string to ensure its value is 7--10 characters all of which fall between 0 and 9.&lt;/p&gt;
&lt;p&gt;But you won&#39;t always be storing phone numbers as strings. Eventually, validation for number fields will need to written and Joi makes this just as direct.&lt;/p&gt;
&lt;h3&gt;Validating Numbers&lt;/h3&gt;
&lt;p&gt;Let&#39;s look at the following example data:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;48000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assuming we&#39;re looking for users between the ages of 18 and 65 our schema could look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;65&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, the readability of Joi is a big selling point as the use of the &lt;code&gt;min()&lt;/code&gt; and &lt;code&gt;max()&lt;/code&gt; methods quickly convey how we&#39;re validating our data.&lt;/p&gt;
&lt;p&gt;However, we won&#39;t always have such defined ranges like 18 and 65. So how can data be validated against other data values?&lt;/p&gt;
&lt;h2&gt;Validate Against Data References&lt;/h2&gt;
&lt;p&gt;In this particular project, which deals with applying for a loan, the user is asked to specify both their total wealth as well as their total savings and investments. Because a person&#39;s savings is part of their total wealth, the &lt;code&gt;savings&lt;/code&gt; field should never be greater than the &lt;code&gt;totalWealth&lt;/code&gt; value. But since we won&#39;t know those values until the time of validation, Joi provides the &lt;code&gt;ref()&lt;/code&gt; method for situations exactly like this.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;totalWealth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;savings&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;totalWealth&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;savings&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;totalWealth&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inside of the &lt;code&gt;max()&lt;/code&gt; method the value of &lt;code&gt;totalWealth&lt;/code&gt; is referenced by using Joi&#39;s &lt;code&gt;ref()&lt;/code&gt; method and passing in the key of the target field. With this schema our &lt;code&gt;data&lt;/code&gt; object would error.&lt;/p&gt;
&lt;h2&gt;Conditional Validation&lt;/h2&gt;
&lt;p&gt;There&#39;s a fair chance you&#39;ve either used or built a form with conditional fields. For example, why show the user fields concerning credit card debt if the user selected &amp;quot;No&amp;quot; to owning any credit cards? Our validation should follow the same logic --- only validate certain fields when other criteria is met.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;hasCreditCards&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;creditCardDebt&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;750&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;creditCardMonthlyPayment&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the data model above and understanding our need for conditional validation, let&#39;s look at our Joi schema.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;hasCreditCards&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;required&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;creditCardDebt&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hasCreditCards&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;creditCardMonthlyPayment&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hasCreditCards&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, the &lt;code&gt;when()&lt;/code&gt; method is leveraged. Again, Joi reads quite clearly --- when &lt;code&gt;hasCreditCards&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; then validate using the following schema.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;But let&#39;s say we wanted to expand our data model to include an array of credit card objects, all containing their own individual values.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;hasCreditCards&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;allCreditCards&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Visa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;250&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Discover&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this case, we have an array with a variable number of objects that we need to validate only if the user &lt;code&gt;hasCreditCards&lt;/code&gt;. Let&#39;s start with what we know:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;hasCreditCards&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;allCreditCards&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hasCreditCards&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, using the &lt;code&gt;when()&lt;/code&gt; method, we can conditionally validate the &lt;code&gt;allCreditCards&lt;/code&gt; array. The next step is to validate the individual properties of each object within the array.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using the &lt;code&gt;items()&lt;/code&gt; method, we define the contents of the array. In this specific case, the items are an object but this method can support any combination of comma-separated Joi schemas.&lt;/p&gt;
&lt;p&gt;For example, if our array would only contain a required string and an optional number our schema could look like this:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;Back to our original credit card example, though. Let&#39;s say we want to have more control over which credit card providers are supported. For example, my Discover card isn &#39;t accepted anywhere in Finland (like literally, anywhere!). So how could we write our validation to include and/or exclude particular values?&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Visa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Mastercard&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invalid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Discover&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using the &lt;code&gt;valid()&lt;/code&gt; and &lt;code&gt;invalid()&lt;/code&gt; methods greater control can be applied to the validation. This can be nicely paired with &lt;code&gt;enum&lt;/code&gt; values as well.&lt;/p&gt;
&lt;p&gt;Now, for it all together.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; schema &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;hasCreditCards&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;allCreditCards&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hasCreditCards&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Visa&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Mastercard&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;invalid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Discover&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;balance&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;payment&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Joi&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cue the record scratch but yet again I love how quickly this can be read and understood. My hat goes off to the work done with the naming within Joi.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Joi is capable of doing so much more than what I&#39;ve covered here and luckily, their documentation (&lt;a href=&quot;https://github.com/hapijs/joi/blob/v13.1.2/API.md&quot;&gt;found here&lt;/a&gt;) is terrific. I feel this project has given me a great crash course on validation and using Joi to do some things that would otherwise be quite challenging.&lt;/p&gt;
&lt;p&gt;Well done, Joi.&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Mar 2018 02:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/what-ive-learned-validating-with-joi/</guid>
      </item>
      
      <item>
        <title>Accessible Web Apps w/ React, TypeScript &amp; AllyJS</title>
        <link>https://www.danyuschick.com/articles/accessible-web-apps-with-react-typeScript-&amp;amp;-allyjs/</link>
        <description>&lt;p&gt;Accessibility is an aspect of web development that is often overlooked. I would argue that it is as vital as overall performance and code reusability. We justify our endless pursuit of better performance and responsive design by citing the users, but ultimately these pursuits are done with the user&#39;s device in mind, not the user themselves and their potential disabilities or restrictions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A responsive app should be one that delivers its content based on the needs of the user, not only their device.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily, there are tools to help alleviate the learning curve of accessibility-minded development. For example, GitHub recently released their accessibility error scanner, AccessibilityJS and Deque has aXe. This article will focus on a different one: &lt;a href=&quot;https://allyjs.io/&quot;&gt;Ally.js&lt;/a&gt;, a library simplifying certain accessibility features, functions, and behaviors.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;One of the most common pain points regarding accessibility is dialog windows.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There&#39;re a lot of considerations to take in terms of communicating to the user about the dialog itself, ensuring ease of access to its content, and returning to the dialog&#39;s trigger upon close.&lt;/p&gt;
&lt;p&gt;A demo on the Ally.js website addresses this challenge which helped me port its logic to my current project which uses React and TypeScript. This post will walk through building an accessible dialog component.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/a11yjs-web-apps/demo-project-1.gif&quot; alt=&quot;Demo of accessible dialog window using Ally.js within React and TypeScript&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://yuschick.github.io/AllyJS-React-TypeScript-demo/&quot;&gt;View the live demo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Project Setup with create-react-app&lt;/h2&gt;
&lt;p&gt;Before getting into the use of Ally.js, let&#39;s take a look at the initial setup of the project. The project can be &lt;a href=&quot;https://github.com/yuschick/AllyJS-React-TypeScript-demo&quot;&gt;cloned from GitHub&lt;/a&gt; or you can follow along manually. The project was initiated using &lt;a href=&quot;https://github.com/facebookincubator/create-react-app&quot;&gt;create-react-app&lt;/a&gt; in the terminal with the following options:&lt;/p&gt;
&lt;p&gt;create-react-app my-app --scripts-version=react-scripts-ts&lt;/p&gt;
&lt;p&gt;This created a project using React and ReactDOM version 15.6.1 along with their corresponding &lt;code&gt;@types&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With the project created, let&#39;s go ahead and take a look at the package file and project scaffolding I am using for this demo.&lt;/p&gt;
&lt;p&gt;&lt;picture&gt;&lt;source type=&quot;image/webp&quot; srcset=&quot;https://www.danyuschick.com/assets/images/3uwNNocwbr-320.webp 320w&quot; sizes=&quot;100vw&quot; /&gt;&lt;img alt=&quot;Project architecture and package.json file&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; src=&quot;https://www.danyuschick.com/assets/images/3uwNNocwbr-320.jpeg&quot; width=&quot;320&quot; height=&quot;153&quot; /&gt;&lt;/picture&gt;&lt;/p&gt;
&lt;p&gt;As you can see in the image above, there are several additional packages installed but for this post we will ignore those related to testing and focus on the primary one, &lt;strong&gt;ally.js&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s install it via our terminal.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;yarn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; ally.js --dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now, let&#39;s leave &lt;code&gt;src/index.tsx&lt;/code&gt; alone and hop straight into our &lt;code&gt;App&lt;/code&gt; container.&lt;/p&gt;
&lt;h2&gt;App Container&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;App&lt;/code&gt; container will handle our state that we use to toggle the dialog window. Now, this could also be handled by Redux but that will be excluded in lieu of brevity.&lt;/p&gt;
&lt;p&gt;Let&#39;s first define the state and toggle method.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppState&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  showDialog&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AppState&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  state&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AppState&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      showDialog&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;toggleDialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; showDialog&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;showDialog &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above gets us started with our &lt;code&gt;state&lt;/code&gt; and the method we will use to toggle the dialog. Next would be to create an outline for our &lt;code&gt;render&lt;/code&gt; method.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AppState&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;site-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Ally.js with React &amp;amp;amp; Typescript&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;main&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;content-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;field-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;htmlFor&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;name-field&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Name:&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;name-field&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Enter your name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;field-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;htmlFor&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;food-field&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Favourite Food:&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;food-field&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token attr-name&quot;&gt;placeholder&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Enter your favourite food&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;field-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;btn primary&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token attr-name&quot;&gt;tabIndex&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toggleDialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;              Open Dialog&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Don&#39;t worry much about the styles and class names at this point. These elements can be styled as you see fit. However, feel free to &lt;a href=&quot;https://github.com/yuschick/AllyJS-React-TypeScript-demo&quot;&gt;clone the GitHub repo&lt;/a&gt; for the full styles.&lt;/p&gt;
&lt;p&gt;At this point we should have a basic form on our page with a button that when clicked toggles our &lt;code&gt;showDialog&lt;/code&gt; state value. This can be confirmed by using &lt;a href=&quot;https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en&quot;&gt;React&#39;s Developer Tools&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So let&#39;s now have the dialog window toggle as well with the button. For this let&#39;s create a new &lt;code&gt;Dialog&lt;/code&gt; component.&lt;/p&gt;
&lt;h2&gt;Dialog Component&lt;/h2&gt;
&lt;p&gt;Let&#39;s look at the structure of our &lt;code&gt;Dialog&lt;/code&gt; component which will act as a wrapper of whatever content (&lt;code&gt;children&lt;/code&gt;) we pass into it.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Props&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  children&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  description&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dialog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Props&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  dialog&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HTMLElement &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;br /&gt;        role&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dialog&quot;&lt;/span&gt;&lt;br /&gt;        tabIndex&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;popup-outer-container&quot;&lt;/span&gt;&lt;br /&gt;        aria&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;hidden&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        aria&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;labelledby&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dialog-title&quot;&lt;/span&gt;&lt;br /&gt;        aria&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;describedby&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dialog-description&quot;&lt;/span&gt;&lt;br /&gt;        ref&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;popup&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; popup&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;h5 id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dialog-title&quot;&lt;/span&gt; className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;is-visually-hidden&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;h5&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;p id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;dialog-description&quot;&lt;/span&gt; className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;is-visually-hidden&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;description&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;p&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;popup-inner-container&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;br /&gt;            className&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;close-icon&quot;&lt;/span&gt;&lt;br /&gt;            aria&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;label&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Close Dialog&quot;&lt;/span&gt;&lt;br /&gt;            onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            ×&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;children&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We begin this component by creating the &lt;code&gt;Props&lt;/code&gt; interface. This will allow us to pass in the dialog&#39;s title and description, two important pieces for accessibility. We will also pass in a &lt;code&gt;close&lt;/code&gt; method, which will refer back to the &lt;code&gt;toggleDialog&lt;/code&gt; method from the &lt;code&gt;App&lt;/code&gt; container. Lastly, we create the functional &lt;code&gt;ref&lt;/code&gt; to the newly created dialog window to be used later.&lt;/p&gt;
&lt;p&gt;The following styles can be applied to create the dialog window appearance.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;.popup-outer-container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; flex&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vh&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.popup-inner-container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #fff&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 4px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0px 0px 10px 3px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;119&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 119&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 119&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0.35&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 750px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 10px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; relative&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.popup-inner-container:focus-within&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;outline&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; -webkit-focus-ring-color auto 2px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.close-icon&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; transparent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #6e6e6e&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; pointer&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2rem/1 sans-serif&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 1rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let&#39;s tie this together with the &lt;code&gt;App&lt;/code&gt; container and then get into Ally.js to make this dialog window more accessible.&lt;/p&gt;
&lt;h2&gt;App Container&lt;/h2&gt;
&lt;p&gt;Back in the &lt;code&gt;App&lt;/code&gt; container, let&#39;s add a check inside of the &lt;code&gt;render&lt;/code&gt; method so any time the &lt;code&gt;showDialog&lt;/code&gt; state updates, the &lt;code&gt;Dialog&lt;/code&gt; component is toggled.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; AppState&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;checkForDialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;showDialog&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getDialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;getDialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dialog&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Favourite Holiday Dialog&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Add your favourite holiday to the list&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token attr-name&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toggleDialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dialog-content&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dialog-title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Holiday Entry&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;dialog-description&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Please enter your favourite holiday.&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;header&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;field-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;htmlFor&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;within-dialog&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;Favourite Holiday&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;within-dialog&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;btns-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;              &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;primary&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token attr-name&quot;&gt;clickHandler&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toggleDialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token attr-name&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Save&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;          &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;footer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Dialog&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;site-container&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;        &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;checkForDialog&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    );&lt;br /&gt;  }&lt;br /&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we&#39;ve done here is add the methods &lt;code&gt;checkForDialog&lt;/code&gt; and &lt;code&gt;getDialog&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Inside of the &lt;code&gt;render&lt;/code&gt; method, which runs any time the state updates, there is a call to run &lt;code&gt;checkForDialog&lt;/code&gt;. So upon clicking the button, the &lt;code&gt;showDialog&lt;/code&gt; state will update, causing a re-render, calling &lt;code&gt;checkForDialog&lt;/code&gt; again. Only now, &lt;code&gt;showDialog&lt;/code&gt; is true, triggering &lt;code&gt;getDialog&lt;/code&gt;. This method returns the &lt;code&gt;Dialog&lt;/code&gt; component we just built to be rendered onto the screen.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The above sample includes a Button component that has not been shown.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now, we should have the ability to open and close our dialog. So let&#39;s take a look at what problems exist in terms of accessibility and how we can address them using Ally.js.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Using only your keyboard, open the dialog window and try to enter text into the form. You&#39;ll notice that you must tab through the entire document to reach the elements within the dialog. This is a less-than-ideal experience. When the dialog opens, our focus should be the dialog --- not the content behind it. So let&#39;s look at our first use of Ally.js to begin remedying this issue.&lt;/p&gt;
&lt;h2&gt;Ally.js&lt;/h2&gt;
&lt;p&gt;Ally.js is a library providing various modules to help simplify common accessibility challenges. We will be using four of these modules for the &lt;code&gt;Dialog&lt;/code&gt; component.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.popup-outer-container&lt;/code&gt; acts as a mask that lays over the page blocking interaction from the mouse. However, elements behind this mask are still accessible via keyboard, which should be disallowed. To do this the first Ally module we&#39;ll incorporate is &lt;code&gt;maintain/disabled&lt;/code&gt;. This is used to disable any set of elements from being focussed via keyboard, essentially making them inert.&lt;/p&gt;
&lt;p&gt;Unfortunately, implementing Ally.js into a project with TypeScript isn&#39;t as straightforward as other libraries. This is due to Ally.js not providing a dedicated set of TypeScript definitions. But no worries, as we can declare our own modules via TypeScript&#39;s &lt;code&gt;types&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;In the original screenshot showing the scaffolding of the project, we see a directory called types. Let&#39;s create that and inside create a file called &lt;code&gt;global.d.ts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Inside of this file let&#39;s declare our first Ally.js modules.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/maintain/disabled&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this module now declared in our global types file, let&#39;s head back into the &lt;code&gt;Dialog&lt;/code&gt; component to begin implementing the functionality.&lt;/p&gt;
&lt;h2&gt;Dialog Component&lt;/h2&gt;
&lt;p&gt;We will be adding all the accessibility functionality for the Dialog to its component to keep it self-contained. Let&#39;s first import our newly declared module at the top of the file.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Disabled &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/maintain/disabled&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The goal of using this module will be once the Dialog component mounts, everything on the page will be disabled while filtering out the dialog itself.&lt;/p&gt;
&lt;p&gt;So let&#39;s use the &lt;code&gt;componentDidMount&lt;/code&gt; lifecycle hook for attaching any Ally.js functionality.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Handle&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dialog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  dialog&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HTMLElement &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  disabledHandle&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      filter&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the component mounts, we store the &lt;code&gt;Disabled&lt;/code&gt; functionality to the newly created component property &lt;code&gt;disableHandle&lt;/code&gt;. Because there are no defined types yet for Ally.js we can create a generic &lt;code&gt;Handle&lt;/code&gt; interface containing the &lt;code&gt;disengage&lt;/code&gt; function property. We will be using this &lt;code&gt;Handle&lt;/code&gt; again for other Ally modules, hence keeping it generic.&lt;/p&gt;
&lt;p&gt;By using the &lt;code&gt;filter&lt;/code&gt; property of the &lt;code&gt;Disabled&lt;/code&gt; import, we&#39;re able to tell Ally.js to disable everything in the document except for our &lt;code&gt;dialog&lt;/code&gt; reference.&lt;/p&gt;
&lt;p&gt;Lastly, whenever the component unmounts we want to remove this behaviour. So inside of the &lt;code&gt;componentWillUnmount&lt;/code&gt; hook, we &lt;code&gt;disengage()&lt;/code&gt; the &lt;code&gt;disableHandle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We will now follow this same process for the final steps of improving the &lt;code&gt;Dialog&lt;/code&gt; component. We will use the additional Ally modules:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;maintain/tab-focus&lt;br /&gt;query/first-tabbable&lt;br /&gt;when/key&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s update the &lt;code&gt;global.d.ts&lt;/code&gt; file so it declares these additional modules.&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/maintain/disabled&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/maintain/tab-focus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/query/first-tabbable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/when/key&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As well as import them all into the Dialog component.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Disabled &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/maintain/disabled&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; TabFocus &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/maintain/tab-focus&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; FirstTab &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/query/first-tabbable&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; Key &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;ally.js/when/key&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Tab Focus&lt;/h2&gt;
&lt;p&gt;After disabling the document with the exception of our dialog, we now need to restrict tabbing access further. Currently, upon tabbing to the last element in the dialog, pressing tab again will begin moving focus to the browser&#39;s UI (such as the address bar). Instead, we want to leverage &lt;code&gt;tab-focus&lt;/code&gt; to ensure the tab key will reset to the beginning of the dialog, not jump to the window.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dialog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Props&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HTMLElement &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;disabledHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;focusHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TabFocus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We follow the same process here as we did for the &lt;code&gt;disabled&lt;/code&gt; module. Let&#39;s create a &lt;code&gt;focusHandle&lt;/code&gt; property which will assume the value of the &lt;code&gt;TabFocus&lt;/code&gt; module import. We define the context to be the active &lt;code&gt;dialog&lt;/code&gt; reference on mount and then &lt;code&gt;disengage()&lt;/code&gt; this behaviour, again, when the component unmounts.&lt;/p&gt;
&lt;p&gt;At this point, with a dialog window open, hitting tab should cycle through the elements within the dialog itself.&lt;/p&gt;
&lt;p&gt;Now, wouldn&#39;t it be nice if the first element of our dialog was already focused upon opening?&lt;/p&gt;
&lt;h2&gt;First Tab Focus&lt;/h2&gt;
&lt;p&gt;Leveraging the &lt;code&gt;first-tabbable&lt;/code&gt; module, we are able to set focus to the first element of the dialog window whenever it mounts.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dialog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Props&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HTMLElement &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;disabledHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;focusHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TabFocus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FirstTab&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;defaultToContext&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Within the &lt;code&gt;componentDidMount&lt;/code&gt; hook, we create the &lt;code&gt;element&lt;/code&gt; variable and assign it to our &lt;code&gt;FirstTab&lt;/code&gt; import. This will return the first tabbable element within the context that we provide. Once that element is returned, calling &lt;code&gt;element.focus()&lt;/code&gt; will apply focus automatically.&lt;/p&gt;
&lt;p&gt;Now, that we have the behavior within the &lt;code&gt;dialog&lt;/code&gt; working pretty well, we want to improve keyboard accessibility. As a strict laptop user myself (no external mouse, monitor, or any peripherals) I tend to instinctively press esc whenever I want to close any dialog or popup. Normally, I would write my own event listener to handle this behavior but Ally.js provides the &lt;code&gt;when/key&lt;/code&gt; module to simplify this process as well.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dialog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Props&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HTMLElement &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;disabledHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;focusHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;keyHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TabFocus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FirstTab&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;defaultToContext&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keyHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function-variable function&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keyHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, we provide a &lt;code&gt;Handle&lt;/code&gt; property to our class which will allow us to easily bind the &lt;code&gt;esc&lt;/code&gt; functionality on mount and then &lt;code&gt;disengage()&lt;/code&gt; it on unmount. And like that, we&#39;re now able to easily close our dialog via the keyboard without necessarily having to tab to a specific close button.&lt;/p&gt;
&lt;p&gt;Lastly (&lt;strong&gt;whew!&lt;/strong&gt;), upon closing the dialog window, the user&#39;s focus should return to the element that triggered it. In this case, the Show Dialog button in the &lt;code&gt;App&lt;/code&gt; container. This isn&#39;t built into Ally.js but a recommended best practice that, as you&#39;ll see, can be added in with little hassle.&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Dialog&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Props&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HTMLElement &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;disabledHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;focusHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;keyHandle&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Handle&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;focusedElementBeforeDialogOpened&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; HTMLInputElement &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; HTMLButtonElement&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeElement &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLInputElement&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;&lt;br /&gt;      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeElement &lt;span class=&quot;token keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HTMLButtonElement&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusedElementBeforeDialogOpened &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;activeElement&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Disabled&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;TabFocus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;FirstTab&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dialog&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;defaultToContext&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keyHandle &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function-variable function&quot;&gt;escape&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    element&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;disabledHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;keyHandle&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disengage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;focusedElementBeforeDialogOpened&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What has been done here is a property, &lt;code&gt;focusedElementBeforeDialogOpened&lt;/code&gt;, has been added to our class. Whenever the component mounts, we store the current &lt;code&gt;activeElement&lt;/code&gt; within the document to this property.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#39;s important to do this before we disable the entire document or else document.activeElement will return null.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then, like we had done with setting focus to the first element in the dialog, we will use the &lt;code&gt;.focus()&lt;/code&gt; method of our stored element on &lt;code&gt;componentWillUnmount&lt;/code&gt; to apply focus to the original button upon closing the dialog. This functionality has been wrapped in a type guard to ensure the element supports the &lt;code&gt;focus()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;Now, that our &lt;code&gt;Dialog&lt;/code&gt; component is working, accessible, and self-contained we are ready to build our App.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;With &lt;a href=&quot;https://allyjs.io/&quot;&gt;Ally.js&lt;/a&gt; incorporated into your React and TypeScript project, more steps can be taken to ensure your content can be consumed by all users, not just all of their devices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.danyuschick.com/assets/articles/a11yjs-web-apps/demo-project-1.gif&quot; alt=&quot;Accessible Web Apps w/ React, TypeScript &amp;amp; AllyJS Demo&quot; /&gt;&lt;/p&gt;
&lt;p&gt;For more information on accessibility and other great resources please visit these resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yuschick/AllyJS-React-TypeScript-demo&quot;&gt;Accessible Web Apps with React, TypeScript &amp;amp; Ally.js on Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://egghead.io/courses/start-building-accessible-web-applications-today&quot;&gt;Start Building Accessible Web Applications Today&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://squizlabs.github.io/HTML_CodeSniffer/&quot;&gt;HTML Codesniffer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.webaccessibility.com/best_practices.php&quot;&gt;Web Accessibility Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@matuzo/writing-css-with-accessibility-in-mind-8514a0007939&quot;&gt;Writing CSS with Accessibility in Mind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://romeo.elsevier.com/accessibility_checklist/&quot;&gt;Accessibility Checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 16 Nov 2017 02:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/accessible-web-apps-with-react-typeScript-&amp;amp;-allyjs/</guid>
      </item>
      
      <item>
        <title>Getting Dynamic with CSS Variables &amp; Media Queries</title>
        <link>https://www.danyuschick.com/articles/getting-dynamic-with-css-variables-and-media-queries/</link>
        <description>&lt;p&gt;I have clung with all but a death grip to my years-long love and use of Sass. But with rapidly advancing browser capabilities, React, and &lt;a href=&quot;https://postcss.org/&quot;&gt;PostCSS&lt;/a&gt;, I find my grip loosening almost completely as I welcome the use of traditional CSS with open arms all over again.&lt;/p&gt;
&lt;p&gt;One of my biggest crutches in Sass was the use of variables. I often had my separate &lt;code&gt;_variables.scss&lt;/code&gt; partial containing colours, fonts, and even spacing values for consistency across stylesheets and, ultimately, projects. Not until recently have I begun using CSS variables heavily. And with this use came a realisation; CSS variables contain a greater capacity for dynamic, responsive styles than ever before.&lt;/p&gt;
&lt;p&gt;In this article I want to go over my personal ah-ha moment when working with CSS variables.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A common habit of mine when dealing with form fields is to set many input types to have a responsive width but cap their maximum width. For example:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;input[type=&quot;text&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this very basic example, I am able to achieve flexible input fields while still retaining a level of control over the ultimate appearance and layout. However, on my recent project spanning numerous forms, developers, and a small mountain&#39;s worth of stylesheets, I have found benefit in extracting that &lt;code&gt;max-width&lt;/code&gt; value out to a variable and setting it on the &lt;code&gt;:root&lt;/code&gt; scope of the project.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--max-input-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My original style is then updated as follows:&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;input[type=&quot;text&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--max-input-width&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100%&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows me to keep input fields contained nicely on smaller screens but as the app scales up, the open space caused by this width limitation becomes glaring.
I haphazardly (&lt;em&gt;and shamefully&lt;/em&gt;) tried solving this by creating an additional variable and writing @media queries.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--max-input-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--max-input-width-lg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 500px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 750px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;input[type=&quot;text&quot;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;--max-input-width-lg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking back on that now, I feel silly. So let&#39;s look at a cleaner solution that utilises the dynamism of CSS variables.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Unlike Sass variables which are converted at the time of compilation, CSS variables are &#39;living&#39; values that can change with their environment. This means that a variable&#39;s value can update based on &lt;code&gt;@media&lt;/code&gt; queries and that new value will apply throughout the project wherever it is being used.&lt;/p&gt;
&lt;p&gt;So let&#39;s return to my &lt;code&gt;variables.css&lt;/code&gt; stylesheet and see how we can put this all together.&lt;/p&gt;
&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;--max-input-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 250px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@media&lt;/span&gt; screen &lt;span class=&quot;token keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 750px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;:root&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;--max-input-width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 500px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, as I scale my app between various breakpoints (&lt;em&gt;because that&#39;s exactly what casual, everyday users do&lt;/em&gt;) my &lt;code&gt;:root&lt;/code&gt;-scoped variables update and cascade down with their latest value.&lt;/p&gt;
&lt;p&gt;I have found this practice beneficial for other elements as well such as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Container widths that should max and then centre&lt;/li&gt;
&lt;li&gt;Headline sizes&lt;/li&gt;
&lt;li&gt;Background image versions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Considering that variable values can be updated based on any &lt;code&gt;@media&lt;/code&gt; query type, there is tremendous potential to offload a lot of additional styles into dynamic variables. Notably, this makes me think about ways of handling the &#39;notch&#39; on the latest iPhone.&lt;/p&gt;
&lt;p&gt;So Sass, if you&#39;re reading, just know it&#39;s not you. I mean, it&#39;s not me either but I think it&#39;s time I truly embrace the next chapter of my life without you.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Oct 2017 03:00:00 +0000</pubDate>
        <dc:creator>Daniel Yuschick</dc:creator>
        <guid>https://www.danyuschick.com/articles/getting-dynamic-with-css-variables-and-media-queries/</guid>
      </item>
  </channel>
</rss>